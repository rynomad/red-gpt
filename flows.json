[
    {
        "id": "78a172cd8b4d25eb",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da11e3db36b977f8",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1138027329e59f05",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "18b253be36f2d1c9",
        "type": "tab",
        "label": "Flow 4",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ae1a045cf8952634",
        "type": "tab",
        "label": "ChatGPT node generator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3badb0a6906eef7f",
        "type": "tab",
        "label": "uib-element tests",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9d62131d7173b55c",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08499cc526888222",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8178bddf53d614e",
        "type": "subflow",
        "name": "button",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [],
        "out": [
            {
                "x": 840,
                "y": 260,
                "wires": [
                    {
                        "id": "f14fd69dd2a8089e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "2",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "12",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "button",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0DFE3",
        "icon": "font-awesome/fa-hand-o-up"
    },
    {
        "id": "4102712984e468f8",
        "type": "subflow",
        "name": "chart",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [
            {
                "x": 100,
                "y": 260,
                "wires": [
                    {
                        "id": "d4a7d3d12aa45eaa"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "4",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "12",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "label",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#77C6CC",
        "icon": "node-red/status.svg"
    },
    {
        "id": "67ec0d412aa1d0d3",
        "type": "subflow",
        "name": "clear",
        "info": "",
        "category": "persona",
        "in": [
            {
                "x": 100,
                "y": 40,
                "wires": [
                    {
                        "id": "e559d6cd7a8de747"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "e559d6cd7a8de747",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "font-awesome/fa-address-card-o"
    },
    {
        "id": "fe8c349f5351690d",
        "type": "subflow",
        "name": "code review",
        "info": "",
        "category": "loop",
        "in": [
            {
                "x": 20,
                "y": 60,
                "wires": [
                    {
                        "id": "13ffd4a443760b0d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 60,
                "wires": [
                    {
                        "id": "97dfc3b21bbd0747",
                        "port": 0
                    },
                    {
                        "id": "856ffe0a6ad4b85c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 630,
                "y": 520,
                "wires": [
                    {
                        "id": "06a3a3dc8c7c4cae",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "min_iterations",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "no issues",
            "send issues"
        ],
        "icon": "font-awesome/fa-eye",
        "status": {
            "x": 1080,
            "y": 540,
            "wires": [
                {
                    "id": "ba66bf21f35cc70a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "13d4ac7b7c9898ae",
        "type": "subflow",
        "name": "codeblock",
        "info": "",
        "category": "format",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 100,
                "wires": [
                    {
                        "id": "31d816170cfa7a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "b7d91a580a2c7c19",
        "type": "subflow",
        "name": "codeblocks",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "bc9b2bca5d9d9220",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "blockTypes",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "8189eef7203c6186",
        "type": "subflow",
        "name": "debugger",
        "info": "",
        "category": "persona",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "3be7b79d7b70220b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "3be7b79d7b70220b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "54c1e80336f93e12",
        "type": "subflow",
        "name": "endpoint",
        "info": "",
        "category": "deprecated",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f6dd154f310aa615",
        "type": "subflow",
        "name": "engineer",
        "info": "",
        "category": "persona",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "d973d3ca1dc6855f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "a5f18db0d45889f2",
        "type": "subflow",
        "name": "flow",
        "info": "",
        "category": "format",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7da9bb553d44f56a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 120,
                "wires": [
                    {
                        "id": "01f9b697fd8ca522",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "b53b3b7e24a3e4e7",
        "type": "subflow",
        "name": "flows",
        "info": "",
        "category": "generator",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "69c4727b24bef714"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 280,
                "wires": [
                    {
                        "id": "8b97ebde3ffd9ecc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "gpt-subflows",
            "version": "0.0.1"
        },
        "color": "#DDAA99",
        "status": {
            "x": 560,
            "y": 80,
            "wires": [
                {
                    "id": "f89c539d2436d4b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1254546b0e9fb57c",
        "type": "subflow",
        "name": "format",
        "info": "",
        "category": "format",
        "in": [
            {
                "x": 260,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "12256771ca410bc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "8994b5c4dba46c76",
        "type": "subflow",
        "name": "gauge",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [
            {
                "x": 100,
                "y": 260,
                "wires": [
                    {
                        "id": "f646c546f7c55ca5"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "4",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "12",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            }
        ],
        "meta": {},
        "color": "#77C6CC",
        "icon": "node-red/timer.svg"
    },
    {
        "id": "6f4063c49a1c2fcf",
        "type": "subflow",
        "name": "improve",
        "info": "",
        "category": "loop",
        "in": [
            {
                "x": 140,
                "y": 400,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 320,
                "wires": [
                    {
                        "id": "3cb5ea13c385cccb",
                        "port": 0
                    },
                    {
                        "id": "c724c0abf1e73cd8",
                        "port": 0
                    },
                    {
                        "id": "b1baa59de5bf39aa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "iterations",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-bar-chart",
        "status": {
            "x": 520,
            "y": 400,
            "wires": []
        }
    },
    {
        "id": "a1b2c3d4e5f6g7h8",
        "type": "subflow",
        "name": "iterate",
        "info": "# Iterate\n\nThis node is for making it easier to loop a message through a refinement process.\n\nIt takes an \"iterations\" argument, default 1.\n\nthe message will go to the first output \"iterations\" number of times, and then exit through the second output.\n",
        "category": "function",
        "in": [
            {
                "x": 100,
                "y": 160,
                "wires": [
                    {
                        "id": "r8a7q3pode"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 120,
                "wires": [
                    {
                        "id": "r8a7q3pode",
                        "port": 0
                    }
                ]
            },
            {
                "x": 330,
                "y": 200,
                "wires": [
                    {
                        "id": "r8a7q3pode",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "iterations",
                "type": "str",
                "value": "1"
            },
            {
                "name": "tag",
                "type": "env",
                "value": "NR_FLOW_ID"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "exit",
            "iterate"
        ],
        "icon": "font-awesome/fa-refresh"
    },
    {
        "id": "1bd86210b503b896",
        "type": "subflow",
        "name": "notification",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [
            {
                "x": 100,
                "y": 260,
                "wires": [
                    {
                        "id": "45ab401d043df784"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "99",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            }
        ],
        "meta": {},
        "color": "#77C6CC",
        "icon": "node-red/envelope.svg"
    },
    {
        "id": "9c0a52e2454bab6f",
        "type": "subflow",
        "name": "slider",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [],
        "out": [
            {
                "x": 840,
                "y": 260,
                "wires": [
                    {
                        "id": "059c4bfd1f783c27",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "6",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "4",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "label",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0DFE3",
        "icon": "font-awesome/fa-sliders"
    },
    {
        "id": "520a10812173e701",
        "type": "subflow",
        "name": "stash",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "dd186aa6a265fc5d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "clear",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "a25be0e127fc9e24",
        "type": "subflow",
        "name": "stash pop",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 60,
                "wires": [
                    {
                        "id": "40226d5093552176",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "key",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "depth",
                "type": "num",
                "value": "1"
            },
            {
                "name": "apply",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "f8d5a5a4f2b87c52",
        "type": "subflow",
        "name": "subflow",
        "info": "",
        "category": "parser",
        "in": [
            {
                "x": 80,
                "y": 420,
                "wires": [
                    {
                        "id": "95f92e2896b1f816"
                    },
                    {
                        "id": "77e60c255444c236"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 280,
                "y": 600,
                "wires": [
                    {
                        "id": "25e9760c313f1739",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "inputLabels": [
            "flow to check"
        ],
        "outputLabels": [
            "valid flow"
        ],
        "status": {
            "x": 420,
            "y": 60,
            "wires": [
                {
                    "id": "9d93e67707347e32",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c9fb680bbb1d67cc",
        "type": "subflow",
        "name": "switch",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [],
        "out": [
            {
                "x": 840,
                "y": 260,
                "wires": [
                    {
                        "id": "0e58721bf2c05cd1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "6",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "12",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0DFE3",
        "icon": "font-awesome/fa-toggle-on"
    },
    {
        "id": "f16c08b0c74d892d",
        "type": "subflow",
        "name": "prompt",
        "info": "",
        "category": "task",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "c306926b9536fe15",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0C0C0",
        "icon": "node-red-dashboard/ui_toast.png"
    },
    {
        "id": "aec0d9b3a72479a3",
        "type": "subflow",
        "name": "text",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [
            {
                "x": 100,
                "y": 260,
                "wires": [
                    {
                        "id": "5e64d43f85e220d5"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "4",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "12",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "label",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#77C6CC",
        "icon": "font-awesome/fa-text-width"
    },
    {
        "id": "eceae5246a022264",
        "type": "subflow",
        "name": "text input",
        "info": "[Dashboard page](uikit)",
        "category": "uikit",
        "in": [],
        "out": [
            {
                "x": 840,
                "y": 260,
                "wires": [
                    {
                        "id": "56af47fb510e7ad0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "order",
                "type": "num",
                "value": "6",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 100
                    }
                }
            },
            {
                "name": "xs",
                "type": "num",
                "value": "4",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 12
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "label",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0DFE3",
        "icon": "font-awesome/fa-text-width"
    },
    {
        "id": "d5c9fa98eff91292",
        "type": "subflow",
        "name": "tokens",
        "info": "",
        "category": "function",
        "in": [
            {
                "x": 160,
                "y": 100,
                "wires": [
                    {
                        "id": "1067c84f3e71a1e0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "1067c84f3e71a1e0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "max",
                "type": "str",
                "value": "4000"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5bc0bb14eb5eea59",
        "type": "subflow",
        "name": "bash",
        "info": "",
        "category": "format",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "51f0b93f4b904c5f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 40,
                "wires": [
                    {
                        "id": "51f0b93f4b904c5f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#AAAA66",
        "icon": "font-awesome/fa-dollar"
    },
    {
        "id": "a54b6077b1444737",
        "type": "subflow",
        "name": "clone",
        "info": "clone\n---",
        "category": "function",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6d9d5d4bb14ed8aa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "6d9d5d4bb14ed8aa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "237429fb2a5a7712",
        "type": "subflow",
        "name": "confgpt",
        "info": "hey hey hey",
        "category": "ChatGPT",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "b636b9ea5bf45435"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 360,
                "wires": [
                    {
                        "id": "d5f444de1f8ceabb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "auto4",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 340,
            "y": 80,
            "wires": [
                {
                    "id": "056755aef7aa376e",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "abe04720c71db29a",
        "type": "subflow",
        "name": "patch",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b9ea49f2da759d2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 200,
                "wires": [
                    {
                        "id": "d8a039a79bee29c9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "issues"
        ],
        "status": {
            "x": 340,
            "y": 40,
            "wires": [
                {
                    "id": "c9749c0bad31bb2a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "01f8323836f16cca",
        "type": "subflow",
        "name": "yes/no",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "7879fb21d83d28bf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 340,
                "wires": [
                    {
                        "id": "a14bafbb9ae8657e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 660,
                "y": 380,
                "wires": [
                    {
                        "id": "2db0f5f35db96af0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "yes",
            "no"
        ],
        "status": {
            "x": 260,
            "y": 100,
            "wires": [
                {
                    "id": "0cedb9219c603c43",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a14f5a91.f5c0b",
        "type": "subflow",
        "name": "Exec output",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "3a31617b.ee3d8a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 60,
                "wires": [
                    {
                        "id": "c39aed08.2c3ee"
                    }
                ]
            },
            {
                "x": 580,
                "y": 160,
                "wires": [
                    {
                        "id": "3c42708d.72b206"
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "icon": "",
            "status": "",
            "color": ""
        },
        "color": "#DDAA99"
    },
    {
        "id": "f9e0ec91.e767e",
        "type": "subflow",
        "name": "Minify JSON",
        "info": "",
        "category": "format",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 160,
                "wires": [
                    {
                        "id": "ffdcd61d.64da38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-archive"
    },
    {
        "id": "67a8cabd-79e0-47ab-ba52-51b8d78cb688",
        "type": "subflow",
        "name": "token calc",
        "info": "",
        "category": "calc",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "a9ae170a-1f25-4488-bb72-4962d3f327c7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 60,
                "wires": [
                    {
                        "id": "a9ae170a-1f25-4488-bb72-4962d3f327c7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-calculator"
    },
    {
        "id": "9f31d45ecb1d3482",
        "type": "subflow",
        "name": "node-red",
        "info": "",
        "category": "schema",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "63dba49296c3a9e4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 80,
                "wires": [
                    {
                        "id": "cf072eee9e78f126",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "50df1246bdaf5119",
        "type": "subflow",
        "name": "smartcoder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a6038949892555d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 480,
                "wires": [
                    {
                        "id": "c5022a931a9bcb7b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "02409038fd9362ee",
        "type": "subflow",
        "name": "step by step",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "587cc92797acd5f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 200,
                "wires": [
                    {
                        "id": "4c18e4ef1378f85f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "bundle",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d295481a52b8fd83",
        "type": "subflow",
        "name": "squash history",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 40,
                "wires": [
                    {
                        "id": "07ae0da70cee4ba6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "start",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e62244fb88b22d11",
        "type": "subflow",
        "name": "dependency-graph",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 80,
                "wires": [
                    {
                        "id": "490a23128bcd3aed"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 80,
                "wires": [
                    {
                        "id": "b943630c2aa10892",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": ""
    },
    {
        "id": "filter-subflows",
        "type": "subflow",
        "name": "Filter Subflows",
        "info": "",
        "category": "filtering",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "84f6c912.6d8e78"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 80,
                "wires": [
                    {
                        "id": "84f6c912.6d8e78",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a10c9763.cb7f38",
        "type": "subflow",
        "name": "Monitor Flows.json",
        "info": "Monitors the local flows.json file for changes and emits the parsed JSON content when a change is detected.",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 820,
                "y": 180,
                "wires": [
                    {
                        "id": "963be666.745e58",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "detect_changes_subflow",
        "type": "subflow",
        "name": "Detect Changes in Subflow Versions",
        "info": "This subflow detects changes in the semver of subflow definitions in a Node-RED flows.json file.",
        "category": "utility",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "analyzeSubflows"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "analyzeSubflows",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#87A980"
    },
    {
        "id": "abc123",
        "type": "subflow",
        "name": "copy and split",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 55,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 615,
                "y": 55,
                "wires": []
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "516cdbf89bbf1e4c",
        "type": "subflow",
        "name": "copy, process and join",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 55,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 615,
                "y": 55,
                "wires": []
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "529552c35927a0b3",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 500,
                "wires": [
                    {
                        "id": "32876e70b1f01560",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "num_copies",
                "type": "num",
                "value": "3"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "subflow_id",
        "type": "subflow",
        "name": "WriteToFile",
        "info": "",
        "category": "File",
        "in": [
            {
                "x": 50,
                "y": 100,
                "wires": [
                    {
                        "id": "function_node_id"
                    },
                    {
                        "id": "c4dadc8e7a05dc19"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "function_node_id",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "FILE_DIRECTORY",
                "type": "env",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#87A980",
        "icon": "node-red/file.png"
    },
    {
        "id": "9a13ab3250919592",
        "type": "group",
        "z": "ae1a045cf8952634",
        "name": "Auto-Importer (Windows + Mac)",
        "style": {
            "label": true
        },
        "nodes": [
            "d454ddf8c6febed0",
            "5bb33e2726d7f97b",
            "f39df16640521d62",
            "141f3dd85e9ac7f4",
            "5de72de4ac72c198",
            "6022cb2397d03ff6",
            "0701e61c80db9b1f",
            "f5b7eedf0256651f",
            "827283cf8de80f5f",
            "95b39c14ee8685eb",
            "c2587e5a46b3333a",
            "03c5690b02dd0e15",
            "46680cd27426e28d",
            "fe47a79e8f60e54a"
        ],
        "x": 554,
        "y": 19,
        "w": 872,
        "h": 222
    },
    {
        "id": "3cd8b7c5aae9d40b",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Base node. Change ALL URL's to match.",
        "style": {
            "label": true,
            "fill": "#ffffbf",
            "fill-opacity": "0.28",
            "color": "#3f3f3f"
        },
        "nodes": [
            "454da28ef00e68b6",
            "90794d03f65a40d4",
            "26fbd32ea1d00ff2",
            "a48c0beb68e76845",
            "c492d5d86eb0cfcb",
            "f0f4f6c5a20a1823",
            "195a61f93a912086",
            "c203417099e22d29",
            "d0ab82e45161ca1e",
            "262ab2295096703e",
            "88abbd5438821f7a",
            "6221e2b8f2b50df8",
            "0dd33ba823c0af7b",
            "5d2fb30390013840",
            "3fd347d2dad186ca",
            "3b6dfa72a2767eb8",
            "81cfdd8b1357b74c",
            "5961e6952243291c"
        ],
        "x": 34,
        "y": 79
    },
    {
        "id": "8049618125109f32",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Chaining test. Outputs from the uib-element node can be sent onwards as long as intermediate nodes retain the msg._ui property \\n ",
        "style": {
            "fill": "#ffefbf",
            "fill-opacity": "0.29",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "14ded4d1dc70efbf",
            "d3cda6078ae9ca73",
            "d3a95abaddc5c013",
            "ec046fe7e55e944c",
            "cef57eb67e055c56",
            "b18b8a4c83135013",
            "f042b949d4143ac6"
        ],
        "x": 34,
        "y": 2183
    },
    {
        "id": "0f5c35ef5c4bf8f5",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Create a Description List from a simple input. Change the URL to match the base",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "fill-opacity": "0.4",
            "color": "#3f3f3f"
        },
        "nodes": [
            "af9ee48ee4da8b11",
            "168cfe507c55796a",
            "03979555908332c4",
            "d08a2076e8158929",
            "8fc4bf76f457ae68",
            "95a6c6f3e84b4fea"
        ],
        "x": 34,
        "y": 859
    },
    {
        "id": "0f3fbb9e84943e6b",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Create a table from simple input. Change the URL to match the base",
        "style": {
            "fill": "#dbcbe7",
            "fill-opacity": "0.3",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "e30d349d9b3399c8",
            "d58b7efe68a2da4d",
            "d52bbc4c5096d4ba",
            "4ce558165663c95b",
            "900f97b2b079f1bf",
            "f38d46523be0c1fe"
        ],
        "x": 34,
        "y": 1147
    },
    {
        "id": "e1901bb3da85dd78",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Create a Unordered or Ordered List from a simple input. Change the URL to match the base.",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.29",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "51db7182c8c27901",
            "0fe568807e7bd394",
            "496418a44a66cc5e",
            "0f1d399c3f14e113",
            "560371c044ee9e19"
        ],
        "x": 34,
        "y": 359
    },
    {
        "id": "08f358ec9af4dfc2",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Dynamically add a row to an existing list. Update the list style for an entry \\n ",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f8db205586825dcd",
            "474079d2dd072158",
            "685760eb828baa61",
            "5df757879277f3a3",
            "c2dcca959c44112c",
            "c87017ebcab8dc1a",
            "e51ee02c0622e551",
            "92af2057a4b6218f"
        ],
        "x": 94,
        "y": 523
    },
    {
        "id": "65795642cec1af50",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Dynamically add a row to an existing table \\n ",
        "style": {
            "fill": "#dbcbe7",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "58968670b8adf81b",
            "b8338b38fa0f261f",
            "a05186890868f6cb"
        ],
        "x": 94,
        "y": 1323
    },
    {
        "id": "42a2b3e7d6c165bf",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Dynamically add a textbox \\n ",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e1795c2c54ee3880",
            "0ff90fd3f27b33be",
            "8b561177d69cb6d3",
            "6e5aada95fc82d83"
        ],
        "x": 34,
        "y": 2023
    },
    {
        "id": "161798c0ebe14c60",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Dynamically change the page title, description and 1st H1 tag on the page \\n ",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9b8878a8a530e1b9",
            "7ed058d7900e3daa",
            "d94e668db5709de3"
        ],
        "x": 34,
        "y": 1903
    },
    {
        "id": "f6154314aee80d24",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "Dynamically insert an input form with auto-send data to node-red via a button. \\n ",
        "style": {
            "fill": "#e3f3d3",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ede83b9af785c506",
            "3923739d82142906",
            "534ccd905d0adc50",
            "85fd31019802a001",
            "f6094a474faf5649",
            "495d6cfe53a5351a"
        ],
        "x": 34,
        "y": 1503
    },
    {
        "id": "263bd5d828fb96be",
        "type": "group",
        "z": "3badb0a6906eef7f",
        "name": "HTML Passthrough. Input HTML is wrapped in a DIV \\n ",
        "style": {
            "fill": "#bfdbef",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "07f1643db81c0995",
            "20deb97725012b7e",
            "da18127ca09d0758",
            "9eed5fe003f16b5e",
            "f02b2b567a27e3bf"
        ],
        "x": 34,
        "y": 1723
    },
    {
        "id": "744e87cdb668bb4c",
        "type": "group",
        "z": "ae1a045cf8952634",
        "name": "Node generator templates",
        "style": {
            "label": true
        },
        "nodes": [
            "6bc47f07e248de42",
            "ec86dcac7444de1a",
            "13d16a4d5b63d77d",
            "84e22af86754b25c",
            "78fe5e7c8a5a98aa",
            "709d2c17b86ff273",
            "14ea77e760e4ffc0",
            "9e04c0a3117e3eed",
            "0634c085abe40419",
            "1347e312c3605c84",
            "07983e9a009caca0",
            "6bfc53cdf3840906",
            "25694714eab84f1f",
            "18716f79f626092a",
            "c65722a64ea5c5a9",
            "b12f08db05a4ef79",
            "7d42a2fe2c17e881",
            "29bf50db4c2fd003",
            "7f458d55cc90c247",
            "14c2821ee677af5b",
            "0ebe932274dd8ae0",
            "12769c7d38749696"
        ],
        "x": 4,
        "y": 299,
        "w": 582,
        "h": 602
    },
    {
        "id": "3f3293c32911f3f7",
        "type": "group",
        "z": "ae1a045cf8952634",
        "name": "Nodes made by a ChatGPT node using the gpt-3.5-turbo model",
        "style": {
            "label": true
        },
        "nodes": [
            "f630892029b028d2",
            "a09e569b9789dc12",
            "21fc2e15bd33bce8",
            "81254dacf9396b61",
            "978ce20453aae444",
            "29e4d3926399a441",
            "afad379e638057f5",
            "6b667bda6cbdf602",
            "c47b95ff81fc1300",
            "d0477f0a51f6b626"
        ],
        "x": 874,
        "y": 279,
        "w": 408,
        "h": 582
    },
    {
        "id": "1c90cadb8c31c64d",
        "type": "junction",
        "z": "ae1a045cf8952634",
        "x": 620,
        "y": 320,
        "wires": [
            [
                "600be270c90b5449"
            ]
        ]
    },
    {
        "id": "195a61f93a912086",
        "type": "junction",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "90794d03f65a40d4"
            ]
        ]
    },
    {
        "id": "81cfdd8b1357b74c",
        "type": "junction",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "x": 640,
        "y": 180,
        "wires": [
            [
                "a48c0beb68e76845",
                "5d2fb30390013840"
            ]
        ]
    },
    {
        "id": "bb3b63c519286beb",
        "type": "junction",
        "z": "fe8c349f5351690d",
        "x": 920,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f43df2ad4f15f7db",
        "type": "junction",
        "z": "ae1a045cf8952634",
        "x": 40,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "e5c5ec0dfa540e85",
        "type": "junction",
        "z": "01f8323836f16cca",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "7879fb21d83d28bf"
            ]
        ]
    },
    {
        "id": "caaba1e23b7b4c41",
        "type": "websocket-listener",
        "path": "/ws4uikit",
        "wholemsg": "false"
    },
    {
        "id": "bcb23e9a79c36d0f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f7666fc9f9e34882",
        "type": "ui_group",
        "name": "Buttons",
        "tab": "58ba9fed0a38efef",
        "order": 1,
        "disp": false,
        "width": "2",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb241514afaec201",
        "type": "ui_tab",
        "name": "Chat",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "68f22f5a2cc4bb38",
        "type": "ui_group",
        "name": "Editor",
        "tab": "58ba9fed0a38efef",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "58ba9fed0a38efef",
        "type": "ui_tab",
        "name": "Example1",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3d871d2d35c179f3",
        "type": "subflow:54c1e80336f93e12",
        "z": "f8178bddf53d614e",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "725a49427164fe74",
        "type": "websocket in",
        "z": "f8178bddf53d614e",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "c4bc5bdb273139d1"
            ]
        ]
    },
    {
        "id": "c4bc5bdb273139d1",
        "type": "json",
        "z": "f8178bddf53d614e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "a0c9983555158280"
            ]
        ]
    },
    {
        "id": "3213262b32656a24",
        "type": "function",
        "z": "f8178bddf53d614e",
        "name": "add button",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n    node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<Button onClick={(e) => ws.send(JSON.stringify({\"id\":\"' + subflowId + '\"}))} variant=\"contained\">'\n         + env.get('label') + '</Button>'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "f404448243cedfbd",
        "type": "inject",
        "z": "f8178bddf53d614e",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "3213262b32656a24"
            ]
        ]
    },
    {
        "id": "77aceb3d16160020",
        "type": "comment",
        "z": "f8178bddf53d614e",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "a0c9983555158280",
        "type": "switch",
        "z": "f8178bddf53d614e",
        "name": "check subflow id",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$reverse($env('NR_NODE_PATH').$split('/'))[1]",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "f14fd69dd2a8089e"
            ]
        ]
    },
    {
        "id": "373adb8feecec29c",
        "type": "comment",
        "z": "f8178bddf53d614e",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "f14fd69dd2a8089e",
        "type": "change",
        "z": "f8178bddf53d614e",
        "name": "Set timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d927a7a65390015f",
        "type": "comment",
        "z": "f8178bddf53d614e",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "a4d107362460662d",
        "type": "subflow:54c1e80336f93e12",
        "z": "4102712984e468f8",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "930e2fa9991a78c6",
        "type": "websocket out",
        "z": "4102712984e468f8",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "e1b4f688743401b3",
        "type": "inject",
        "z": "4102712984e468f8",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "b83fcf8e9ef1ce06"
            ]
        ]
    },
    {
        "id": "b83fcf8e9ef1ce06",
        "type": "function",
        "z": "4102712984e468f8",
        "name": "add plot",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n  node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n           + '<Plot data={plotData[\"' + subflowId + '\"]} config={{staticPlot:true}} layout={{width:\"100%\", height:\"400\", title:\"' + env.get('label') + '\"}} />'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "1cfc7f21b191796c",
        "type": "comment",
        "z": "4102712984e468f8",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "10f6c1dff074dbf2",
        "type": "function",
        "z": "4102712984e468f8",
        "name": "Clear context data",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\nglobal.set('plotData[\"' + subflowId + '\"]', undefined);\nmsg.payload = global.get('plotData');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "2fcb9b1fd3aee802"
            ]
        ]
    },
    {
        "id": "d4a7d3d12aa45eaa",
        "type": "switch",
        "z": "4102712984e468f8",
        "name": "clear?",
        "property": "$count(payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "68bab89d34a6f1f4"
            ],
            [
                "10f6c1dff074dbf2"
            ]
        ]
    },
    {
        "id": "95b2c2cdcef1db94",
        "type": "comment",
        "z": "4102712984e468f8",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "2fcb9b1fd3aee802",
        "type": "change",
        "z": "4102712984e468f8",
        "name": "Read all context data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"type\": \"chart\",\t   \"payload\": payload \t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "930e2fa9991a78c6"
            ]
        ]
    },
    {
        "id": "68bab89d34a6f1f4",
        "type": "function",
        "z": "4102712984e468f8",
        "name": "Store data to context",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nvar dataX = global.get('plotData[\"' + subflowId + '\"][0].x') || [];\ndataX.push(new Date().toISOString());\nglobal.set('plotData[\"' + subflowId + '\"][0].x', dataX);\n\nvar dataY = global.get('plotData[\"' + subflowId + '\"][0].y') || [];\ndataY.push(msg.payload);\nglobal.set('plotData[\"' + subflowId + '\"][0].y', dataY);\n\nmsg.payload = global.get('plotData');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "2fcb9b1fd3aee802"
            ]
        ]
    },
    {
        "id": "f329388374f1498c",
        "type": "comment",
        "z": "4102712984e468f8",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "e559d6cd7a8de747",
        "type": "template",
        "z": "67ec0d412aa1d0d3",
        "name": "clear persona",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 240,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "37e64ff1a5be2357",
        "type": "subflow:f6dd154f310aa615",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "e6c6b71e30f8117a"
            ]
        ]
    },
    {
        "id": "e6c6b71e30f8117a",
        "type": "subflow:8189eef7203c6186",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "cf31527d75e0ce78"
            ]
        ]
    },
    {
        "id": "ba66bf21f35cc70a",
        "type": "status",
        "z": "fe8c349f5351690d",
        "name": "",
        "scope": null,
        "x": 980,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8658689b59d2ae60",
        "type": "template",
        "z": "fe8c349f5351690d",
        "name": "is ready?",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "In your judgment, is this code ready for production?\n\nAnswer YES or NO",
        "output": "str",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "ecf0747bba696a5e"
            ]
        ]
    },
    {
        "id": "74d2e0e0328d3a27",
        "type": "subflow:a25be0e127fc9e24",
        "z": "fe8c349f5351690d",
        "name": "restore history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "06a3a3dc8c7c4cae"
            ]
        ]
    },
    {
        "id": "06a3a3dc8c7c4cae",
        "type": "subflow:a25be0e127fc9e24",
        "z": "fe8c349f5351690d",
        "name": "restore persona",
        "env": [
            {
                "name": "key",
                "value": "persona",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3a5bba3c89579f52",
        "type": "subflow:520a10812173e701",
        "z": "fe8c349f5351690d",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "b9fcf373d2de669c"
            ]
        ]
    },
    {
        "id": "b9fcf373d2de669c",
        "type": "subflow:520a10812173e701",
        "z": "fe8c349f5351690d",
        "name": "stash persona",
        "env": [
            {
                "name": "key",
                "value": "persona",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "118057daefdd99df"
            ]
        ]
    },
    {
        "id": "118057daefdd99df",
        "type": "subflow:520a10812173e701",
        "z": "fe8c349f5351690d",
        "name": "stash code",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "37e64ff1a5be2357"
            ]
        ]
    },
    {
        "id": "51558e1c74f47c70",
        "type": "subflow:a25be0e127fc9e24",
        "z": "fe8c349f5351690d",
        "name": "restore code",
        "env": [
            {
                "name": "depth",
                "value": "2",
                "type": "num"
            },
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "97dfc3b21bbd0747"
            ]
        ]
    },
    {
        "id": "cf31527d75e0ce78",
        "type": "template",
        "z": "fe8c349f5351690d",
        "name": "review",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\nYou are tasked to review a project according to the following requirements and formating guidelines:\n---START REQUIREMENTS---\n{{{requirements}}}\n---END REQUIREMENTS---\n\n---START FORMATTING INSTRUCTIONS---\n{{{format}}}\n---END FORMATTING INSTRUCTIONS---\n\nThe following is a draft of the project. review it carefully for anything that may cause it to fail or anything that violates the requirements or formating instructions:\n\n---DRAFT---\n{{{payload}}}\n---DRAFT---\n\noutput a brief but precise description of any issues you can find, scored from 0 to 10, categorized and ranked by severity.\ndo not try to fix any of the issues, just describe them.\n",
        "output": "str",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "e31a558f15fef34d"
            ]
        ]
    },
    {
        "id": "ecf0747bba696a5e",
        "type": "subflow:01f8323836f16cca",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "25a91607a53cb9e2"
            ],
            [
                "507e03c79ba6f78e"
            ]
        ]
    },
    {
        "id": "601564e6b007be41",
        "type": "subflow:520a10812173e701",
        "z": "fe8c349f5351690d",
        "name": "stash review",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "8658689b59d2ae60"
            ]
        ]
    },
    {
        "id": "a74893b9a697d924",
        "type": "subflow:a25be0e127fc9e24",
        "z": "fe8c349f5351690d",
        "name": "restore review",
        "x": 640,
        "y": 380,
        "wires": [
            [
                "74d2e0e0328d3a27"
            ]
        ]
    },
    {
        "id": "97dfc3b21bbd0747",
        "type": "subflow:a25be0e127fc9e24",
        "z": "fe8c349f5351690d",
        "name": "restore persona",
        "env": [
            {
                "name": "key",
                "value": "persona",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "507e03c79ba6f78e",
        "type": "template",
        "z": "fe8c349f5351690d",
        "name": "will be ready?",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "In your judgment, will this code be ready for production after these issues are dealt with?\n\nAnswer YES or NO",
        "output": "str",
        "x": 640,
        "y": 300,
        "wires": [
            [
                "d8ee7be962608983"
            ]
        ]
    },
    {
        "id": "d8ee7be962608983",
        "type": "subflow:01f8323836f16cca",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "ab23f7eeb99f3b52"
            ],
            [
                "a74893b9a697d924"
            ]
        ]
    },
    {
        "id": "ab23f7eeb99f3b52",
        "type": "change",
        "z": "fe8c349f5351690d",
        "name": "set last review",
        "rules": [
            {
                "t": "set",
                "p": "lastReview",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 340,
        "wires": [
            [
                "a74893b9a697d924"
            ]
        ]
    },
    {
        "id": "3868a9fe364e426c",
        "type": "switch",
        "z": "fe8c349f5351690d",
        "name": "check last review",
        "property": "lastReview",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "856ffe0a6ad4b85c"
            ],
            []
        ],
        "outputLabels": [
            "is last",
            "is not last"
        ]
    },
    {
        "id": "856ffe0a6ad4b85c",
        "type": "change",
        "z": "fe8c349f5351690d",
        "name": "clear last review",
        "rules": [
            {
                "t": "set",
                "p": "lastReview",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "13ffd4a443760b0d",
        "type": "subflow:a1b2c3d4e5f6g7h8",
        "z": "fe8c349f5351690d",
        "name": "",
        "env": [
            {
                "name": "iterations",
                "value": "min_iterations",
                "type": "env"
            }
        ],
        "x": 190,
        "y": 60,
        "wires": [
            [
                "3868a9fe364e426c"
            ],
            [
                "3a5bba3c89579f52"
            ]
        ]
    },
    {
        "id": "25a91607a53cb9e2",
        "type": "template",
        "z": "fe8c349f5351690d",
        "name": "return output",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "one final time, please output the complete project according to the formatting instructions.\n\nyour ONLY output should be the appropriately formatted project code. Do not include extra commentary or notes.",
        "output": "str",
        "x": 850,
        "y": 280,
        "wires": [
            [
                "56ebb68aad2bcba1"
            ]
        ]
    },
    {
        "id": "56ebb68aad2bcba1",
        "type": "subflow:237429fb2a5a7712",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 840,
        "y": 240,
        "wires": [
            [
                "7f084c36ba1a4242"
            ]
        ]
    },
    {
        "id": "7f084c36ba1a4242",
        "type": "function",
        "z": "fe8c349f5351690d",
        "name": "splice history",
        "func": "msg.history = [msg.stash.history.pop()[0], msg.history.pop()]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 200,
        "wires": [
            [
                "51558e1c74f47c70"
            ]
        ]
    },
    {
        "id": "e31a558f15fef34d",
        "type": "subflow:237429fb2a5a7712",
        "z": "fe8c349f5351690d",
        "name": "",
        "x": 620,
        "y": 140,
        "wires": [
            [
                "601564e6b007be41"
            ]
        ]
    },
    {
        "id": "31d816170cfa7a8f",
        "type": "template",
        "z": "13d4ac7b7c9898ae",
        "name": "codeblock",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Put the primary output inside a github flavored markdown code block, with an appropriate language label\n\n{{{format}}}",
        "output": "str",
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bc9b2bca5d9d9220",
        "type": "function",
        "z": "b7d91a580a2c7c19",
        "name": "Extract Code Blocks",
        "func": "function extractCodeBlocks(text, blockTypes) {\n  const results = [];\n  const allBlocks = !blockTypes || blockTypes.length === 0;\n\n  let codeBlockRegex;\n  if (allBlocks) {\n    codeBlockRegex = /```(\\w*)\\n([\\s\\S]*?)\\n```/g;\n  } else {\n    const regexStr = blockTypes.map((type) => `(${type})`).join('|');\n    codeBlockRegex = new RegExp(`\\`\\`\\`(${regexStr})\\n([\\\\s\\\\S]*?)\\\\n\\`\\`\\``, 'g');\n    // const jsonBlockRegex = new RegExp(`\\`\\`\\`((json))\\n([\\\\s\\\\S]*?)\\`\\`\\``, 'g');\n    // console.log('manual match?', jsonBlockRegex.exec(text))\n  }\n\n  let match;\n  while ((match = codeBlockRegex.exec(text)) !== null) {\n    // console.log('got match', match);\n    const type = match[2];\n    const content = match[3];\n    results.push({ type, content });\n  }\n\n  return results;\n}\n\nconst text = msg.payload;\n\nconst blockTypes = (env.get('blockTypes') || '').split(',').filter(t => t);\n// console.log('extract', text, blockTypes)\nmsg.payload = extractCodeBlocks(text, blockTypes);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3be7b79d7b70220b",
        "type": "template",
        "z": "8189eef7203c6186",
        "name": "expert debugger",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert debugger with a keen eye for spotting and fixing subtle bugs.\n{{persona}}",
        "output": "str",
        "x": 190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "bf132f77860c7bfc",
        "type": "http in",
        "z": "54c1e80336f93e12",
        "name": "",
        "url": "/uikit",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "ee2530bd1bea6bd6"
            ]
        ]
    },
    {
        "id": "3fc876517efca407",
        "type": "http response",
        "z": "54c1e80336f93e12",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "f1b250323f03ff6f",
        "type": "change",
        "z": "54c1e80336f93e12",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "init",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "jsx",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a2656ed66f101c58",
        "type": "http in",
        "z": "54c1e80336f93e12",
        "name": "",
        "url": "/export",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "4e7ca24d2928f980"
            ]
        ]
    },
    {
        "id": "258fc2ba5a704c14",
        "type": "http response",
        "z": "54c1e80336f93e12",
        "name": "",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/zip",
            "Content-Disposition": "attachment"
        },
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "d256fb23a6046d16",
        "type": "inject",
        "z": "54c1e80336f93e12",
        "name": "clear context",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "f1b250323f03ff6f"
            ]
        ]
    },
    {
        "id": "415ffaca442298e7",
        "type": "comment",
        "z": "54c1e80336f93e12",
        "name": "Clear global context after deploying flow immediately",
        "info": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "ee2530bd1bea6bd6",
        "type": "function",
        "z": "54c1e80336f93e12",
        "name": "create jsx",
        "func": "var init = '';\nif (global.get('init')) {\n    for (var i = 0; i < global.get('init').length; i++) {\n        var tmp = global.get('init[' + i + ']');\n        if (tmp) {\n            init += tmp;\n        }\n    }\n}\nmsg.init = init;\n\nvar jsx = '';\nif (global.get('jsx')) {\n    for (var i = 0; i < global.get('jsx').length; i++) {\n        var tmp = global.get('jsx[' + i + ']');\n        if (tmp) {\n            jsx += tmp;\n        }\n    }\n}\nmsg.payload = '<Grid container spacing={1}><AppBar position=\"static\"><Toolbar><Typography>'\n            + env.get('NR_FLOW_NAME').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n            + '</Typography></Toolbar></AppBar>' + jsx + '</Grid>';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "d77fb6198dd418e2"
            ]
        ]
    },
    {
        "id": "4e7ca24d2928f980",
        "type": "function",
        "z": "54c1e80336f93e12",
        "name": "create jsx",
        "func": "var init = '';\nif (global.get('init')) {\n    for (var i = 0; i < global.get('init').length; i++) {\n        var tmp = global.get('init[' + i + ']');\n        if (tmp) {\n            init += tmp;\n        }\n    }\n}\nmsg.init = init;\n\nvar jsx = '';\nif (global.get('jsx')) {\n    for (var i = 0; i < global.get('jsx').length; i++) {\n        var tmp = global.get('jsx[' + i + ']');\n        if (tmp) {\n            jsx += tmp;\n        }\n    }\n}\nmsg.payload = '<Grid container spacing={1}><AppBar position=\"static\"><Toolbar><Typography>'\n    + env.get('NR_FLOW_NAME').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n    + '</Typography></Toolbar></AppBar>' + jsx + '</Grid>';\n\nmsg.payload = jsBeautify.html(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsBeautify",
                "module": "js-beautify"
            }
        ],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "b02775cb637a114d"
            ]
        ]
    },
    {
        "id": "86619e9c23d0d00c",
        "type": "comment",
        "z": "54c1e80336f93e12",
        "name": "Generate HTML with JSX generated from `jsx` in global context",
        "info": "",
        "x": 310,
        "y": 200,
        "wires": []
    },
    {
        "id": "b871b4ef2140202f",
        "type": "function",
        "z": "54c1e80336f93e12",
        "name": "generate zip",
        "func": "var zip = new JSZip();\nzip.file(\"dashboard-app/src/index.js\", msg.indexJs);\nzip.file(\"dashboard-app/public/index.html\", msg.indexHtml);\nzip.file(\"dashboard-app/package.json\", msg.packageJson);\nzip.generateAsync({ type: \"nodebuffer\" }).then(function (content) {\n    msg.payload = content;\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "JSZip",
                "module": "jszip"
            }
        ],
        "x": 530,
        "y": 380,
        "wires": [
            [
                "258fc2ba5a704c14"
            ]
        ]
    },
    {
        "id": "d77fb6198dd418e2",
        "type": "template",
        "z": "54c1e80336f93e12",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n<head>\n  <title>{{{env.NR_FLOW_NAME}}}</title>\n  <script src=\"https://unpkg.com/react/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom/umd/react-dom.development.js\"></script>\n  <script src=\"https://unpkg.com/@mui/material/umd/material-ui.development.js\"></script>\n  <script src=\"https://unpkg.com/babel-standalone/babel.min.js\"></script>\n  <script src=\"https://unpkg.com/plotly.js-dist/plotly.js\"></script>\n  <script src=\"https://unpkg.com/react-plotly.js/dist/create-plotly-component.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n  <script type=\"text/babel\">\n    var data, setData;\n    var plotData, setPlotData;\n    var ws = new WebSocket('ws' + (location.protocol === 'https:' ? 's' : '') + '://' + location.host + '/ws4uikit');\n    ws.onmessage = function (e) {\n      var json = JSON.parse(e.data);\n      if (json.type === 'chart') {\n        setPlotData(json.payload);\n      } else {\n        setData({...data, ...json});\n      }\n      console.log(json);\n    };\n    ws.onclose = function (e) {\n      setTimeout(function () { window.location.reload(); }, 300);\n    };\n    function App() {\n      [data, setData] = React.useState({});\n      [plotData, setPlotData] = React.useState([]);\n      var { Button, Switch, Typography, TextField, CircularProgress, Slider, Snackbar, Grid, Box, AppBar, Toolbar } = MaterialUI;\n      var Plot = createPlotlyComponent.default(Plotly);\n      return (<div>{{{payload}}}</div>);\n    };\n    var root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render(<App />);\n    setTimeout(function () { {{{init}}} }, 100);\n  </script>\n</head>\n<body><div id=\"root\" /></body>\n</html>",
        "output": "str",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "3fc876517efca407"
            ]
        ]
    },
    {
        "id": "d432e22b7bf6d605",
        "type": "template",
        "z": "54c1e80336f93e12",
        "name": "index.html",
        "field": "indexHtml",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html><body><div id=\"root\"></div></body></html>",
        "output": "str",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "a539cd72fa502b41"
            ]
        ]
    },
    {
        "id": "b02775cb637a114d",
        "type": "template",
        "z": "54c1e80336f93e12",
        "name": "index.js",
        "field": "indexJs",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Button, Switch, Typography, TextField, CircularProgress, Slider, Snackbar, Grid, Box, AppBar, Toolbar } from '@mui/material';\nimport Plot from 'react-plotly.js';\n\nfunction App() {\n    var data, setData;\n    var plotData, setPlotData;\n    [data, setData] = React.useState({});\n    [plotData, setPlotData] = React.useState([]);\n    var ws = new WebSocket('ws://localhost:1880/ws4uikit');\n    ws.onmessage = function (e) {\n        var json = JSON.parse(e.data);\n        if (json.type === 'chart') {\n            setPlotData(json.payload);\n        } else {\n            setData({...data, ...json});\n        }\n    };\n    ws.onclose = function (e) {\n        setTimeout(function () { window.location.reload(); }, 300);\n    };\n    return (<div>{{{payload}}}</div>);\n    setTimeout(function () { {{{init}}} }, 100);\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<React.StrictMode><App /></React.StrictMode>);",
        "output": "str",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "d432e22b7bf6d605"
            ]
        ]
    },
    {
        "id": "a539cd72fa502b41",
        "type": "template",
        "z": "54c1e80336f93e12",
        "name": "package.json",
        "field": "packageJson",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"name\": \"dashboard-app\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"@emotion/styled\": \"11.10.4\",\n    \"@mui/material\": \"5.10.10\",\n    \"plotly.js\": \"2.16.1\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-plotly.js\": \"2.6.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}",
        "output": "str",
        "x": 340,
        "y": 380,
        "wires": [
            [
                "b871b4ef2140202f"
            ]
        ]
    },
    {
        "id": "d973d3ca1dc6855f",
        "type": "template",
        "z": "f6dd154f310aa615",
        "name": "expert debugger",
        "field": "persona",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert {{language}} software engineer at the top of your game.\nYou are known for writing clean, clear code.\n{{persona}}",
        "output": "str",
        "x": 190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "01f9b697fd8ca522",
        "type": "subflow:13d4ac7b7c9898ae",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 190,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bb67c6f583a80cc4",
        "type": "template",
        "z": "a5f18db0d45889f2",
        "name": "flow",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Please ensure your output is a valid, parsable, node-red array, suitable for import:\nhere's an example:\n\n[{\"id\":\"13d4ac7b7c9898ae\",\"type\":\"subflow\",\"name\":\"codeblock\",\"info\":\"\",\"category\":\"format\",\"in\":[{\"x\":80,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\"}]}],\"out\":[{\"x\":300,\"y\":100,\"wires\":[{\"id\":\"31d816170cfa7a8f\",\"port\":0}]}],\"env\":[],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-archive\"},{\"id\":\"31d816170cfa7a8f\",\"type\":\"template\",\"z\":\"13d4ac7b7c9898ae\",\"name\":\"codeblock\",\"field\":\"format\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Put the primary output inside a github flavored markdown code block, with an appropriate language label\\n\\n{{{format}}}\",\"output\":\"str\",\"x\":190,\"y\":100,\"wires\":[[]]}]\n\nhere's a formal definition in JSON schema\n{{{schemaString}}}\n",
        "output": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "01f9b697fd8ca522"
            ]
        ]
    },
    {
        "id": "7da9bb553d44f56a",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "a5f18db0d45889f2",
        "name": "",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "bb67c6f583a80cc4"
            ]
        ]
    },
    {
        "id": "f89c539d2436d4b8",
        "type": "status",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "scope": null,
        "x": 500,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "c24941818a42ca98",
        "type": "subflow:f16c08b0c74d892d",
        "z": "b53b3b7e24a3e4e7",
        "name": "bundle prompt",
        "x": 340,
        "y": 240,
        "wires": [
            [
                "8b97ebde3ffd9ecc"
            ]
        ]
    },
    {
        "id": "1a48d7a00270d882",
        "type": "subflow:a5f18db0d45889f2",
        "z": "b53b3b7e24a3e4e7",
        "name": "set format to node-red subflow",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "4c1e24c203e0aef7"
            ]
        ]
    },
    {
        "id": "69c4727b24bef714",
        "type": "subflow:f6dd154f310aa615",
        "z": "b53b3b7e24a3e4e7",
        "name": "set persona to engineer",
        "x": 310,
        "y": 120,
        "wires": [
            [
                "1a48d7a00270d882"
            ]
        ]
    },
    {
        "id": "4c1e24c203e0aef7",
        "type": "subflow:1254546b0e9fb57c",
        "z": "b53b3b7e24a3e4e7",
        "name": "wrap format instructions",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "c24941818a42ca98"
            ]
        ]
    },
    {
        "id": "8b97ebde3ffd9ecc",
        "type": "subflow:50df1246bdaf5119",
        "z": "b53b3b7e24a3e4e7",
        "name": "",
        "env": [
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            },
            {
                "name": "num_copies",
                "value": "2",
                "type": "num"
            }
        ],
        "x": 370,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "12256771ca410bc7",
        "type": "template",
        "z": "1254546b0e9fb57c",
        "name": "format meta instructions",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Your response MUST obey the following formatting rules\n\n{{{format}}}\n\nThis formatting is critically important. Failing to obey this formatting rule will halt all progress.",
        "output": "str",
        "x": 410,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5a1a7d27ba921bef",
        "type": "subflow:54c1e80336f93e12",
        "z": "8994b5c4dba46c76",
        "name": "",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "b877cb90d35957e3",
        "type": "websocket out",
        "z": "8994b5c4dba46c76",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 420,
        "y": 260,
        "wires": []
    },
    {
        "id": "0a65bc7dc4acd568",
        "type": "function",
        "z": "8994b5c4dba46c76",
        "name": "add CircularProgress",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n  node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<Box sx={{position:\"relative\",display:\"inline-flex\"}}>'\n         + '<CircularProgress variant=\"determinate\" color=\"success\" size=\"180px\" value={Number(data[\"' + subflowId + '\"]) || 0} />'\n         + '<Box sx={{top:0,left:0,bottom:0,right:0,position:\"absolute\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\"}}>'\n         + '<Typography variant=\"h4\">{Number(data[\"' + subflowId + '\"]) || 0} %</Typography>'\n         + '</Box>'\n\n         + '<Box sx={{top:0,left:0,bottom:0,right:0,position:\"absolute\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\"}}>'\n         + '<CircularProgress variant=\"determinate\" color=\"success\" size=\"152px\" value={Number(data[\"' + subflowId + '\"]) || 0} />'\n         + '</Box>'\n\n\n         + '</Box>'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": []
    },
    {
        "id": "3ca0e773e47d324b",
        "type": "inject",
        "z": "8994b5c4dba46c76",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "0a65bc7dc4acd568"
            ]
        ]
    },
    {
        "id": "bfc9cacebeea3633",
        "type": "comment",
        "z": "8994b5c4dba46c76",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "f646c546f7c55ca5",
        "type": "change",
        "z": "8994b5c4dba46c76",
        "name": "create data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   $reverse($env('NR_NODE_PATH').$split('/'))[1]: $string(payload) \t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "b877cb90d35957e3"
            ]
        ]
    },
    {
        "id": "5335b15cf04a7487",
        "type": "comment",
        "z": "8994b5c4dba46c76",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "7066c1bb463eb04e",
        "type": "comment",
        "z": "8994b5c4dba46c76",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "da8b8b2bec1e1864",
        "type": "subflow:a1b2c3d4e5f6g7h8",
        "z": "6f4063c49a1c2fcf",
        "name": "",
        "env": [
            {
                "name": "iterations",
                "value": "iterations",
                "type": "env"
            }
        ],
        "x": 230,
        "y": 400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6299457260260ca4",
        "type": "subflow:f6dd154f310aa615",
        "z": "6f4063c49a1c2fcf",
        "name": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "aef2d4173426a8f6"
            ]
        ]
    },
    {
        "id": "aef2d4173426a8f6",
        "type": "subflow:8189eef7203c6186",
        "z": "6f4063c49a1c2fcf",
        "name": "",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "3cb5ea13c385cccb"
            ]
        ]
    },
    {
        "id": "b1baa59de5bf39aa",
        "type": "template",
        "z": "6f4063c49a1c2fcf",
        "name": "final prompt",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "please summarize the set of issues that you believe must be resolved before this code is sufficiently robust to be run correctly.",
        "output": "str",
        "x": 410,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3cb5ea13c385cccb",
        "type": "template",
        "z": "6f4063c49a1c2fcf",
        "name": "initial prompt",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{persona}}\n\nThe code above has never been run. review it carefully for anything that may cause it to fail to run or to fail to meet the requirements.\n\nHere's a reminder of the requirements:\n{{requirements}}\n\noutput a brief but precise description of the most critical issues you find, scored from 0 to 10 and ranked by severity.\n",
        "output": "str",
        "x": 410,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c724c0abf1e73cd8",
        "type": "template",
        "z": "6f4063c49a1c2fcf",
        "name": "middle prompts",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "please continue your review.",
        "output": "str",
        "x": 420,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "51705dfb3cc74e16",
        "type": "subflow:a25be0e127fc9e24",
        "z": "6f4063c49a1c2fcf",
        "name": "restore persona",
        "env": [
            {
                "name": "key",
                "value": "persona",
                "type": "str"
            }
        ],
        "x": 420,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c01e8b73177e4188",
        "type": "function",
        "z": "6f4063c49a1c2fcf",
        "name": "set status",
        "func": "function generateStatusObject() {\n    const nodeId = env.get('NR_NODE_ID');\n    const currentIteration = msg.iterations[nodeId];\n    const totalIterations = env.get('iterations');\n    // @ts-ignore\n    const percentage = Math.round((currentIteration / totalIterations) * 100);\n\n    const status = {\n        text: `Review ${currentIteration}/${totalIterations} (${percentage}%)`,\n        fill: 'blue',\n        shape: 'dot'\n    };\n\n    if (currentIteration === totalIterations) {\n        status.text = 'Review complete';\n        status.fill = 'green';\n    } else if (currentIteration > totalIterations) {\n        status.text = 'Review iterations exceeded';\n        status.fill = 'red';\n    }\n\n    return status;\n}\n\nmsg.status = generateStatusObject()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "6b4bb58f82f3c27d",
        "type": "subflow:520a10812173e701",
        "z": "6f4063c49a1c2fcf",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "6299457260260ca4"
            ]
        ]
    },
    {
        "id": "a44fbc814dc779b9",
        "type": "subflow:520a10812173e701",
        "z": "6f4063c49a1c2fcf",
        "name": "stash persona",
        "env": [
            {
                "name": "key",
                "value": "persona",
                "type": "str"
            }
        ],
        "x": 210,
        "y": 280,
        "wires": [
            [
                "6b4bb58f82f3c27d"
            ]
        ]
    },
    {
        "id": "3ad8f4598b2e3b3b",
        "type": "switch",
        "z": "6f4063c49a1c2fcf",
        "name": "which iteration?",
        "property": "$lookup(iterations, $env('NR_NODE_ID'))",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "$env(\"iterations\") - 1 ",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 200,
        "y": 340,
        "wires": [
            [
                "a44fbc814dc779b9"
            ],
            [
                "c724c0abf1e73cd8"
            ],
            [
                "b1baa59de5bf39aa"
            ]
        ]
    },
    {
        "id": "r8a7q3pode",
        "type": "function",
        "z": "a1b2c3d4e5f6g7h8",
        "name": "",
        "func": "if ( typeof msg.iterations === 'undefined'){\n    msg.iterations = {}\n}\n\n\nconst nodeId = env.get('NR_NODE_PATH');\nconst totalIterations = env.get('iterations');\n\nmsg.iterations.path = nodeId;\n\nif (typeof msg.iterations[nodeId] === 'number'){\n    msg.iterations[nodeId]++;\n} else {\n    msg.iterations[nodeId] = 0;\n}\n\nlet cur = msg.iterations[nodeId];\n\nif (cur < totalIterations) {\n    return [null, msg];\n} else {\n    return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8db9db7ed8d34a32",
        "type": "subflow:54c1e80336f93e12",
        "z": "1bd86210b503b896",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "8f7137cf51e096bd",
        "type": "websocket out",
        "z": "1bd86210b503b896",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 420,
        "y": 260,
        "wires": []
    },
    {
        "id": "c671c12db131dc9e",
        "type": "inject",
        "z": "1bd86210b503b896",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "bbe11882af4c1919"
            ]
        ]
    },
    {
        "id": "bbe11882af4c1919",
        "type": "function",
        "z": "1bd86210b503b896",
        "name": "add Snackbar",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n    node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Snackbar message={data[\"' + subflowId + '\"]} open={data[\"' + subflowId + '\"]!==undefined} autoHideDuration={3000} onClose={function () { var tmp = {...data}; delete tmp[\"' + subflowId + '\"]; setData(tmp); }} />');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "2eb6a23ac95610aa",
        "type": "comment",
        "z": "1bd86210b503b896",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "45ab401d043df784",
        "type": "change",
        "z": "1bd86210b503b896",
        "name": "create data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   $reverse($env('NR_NODE_PATH').$split('/'))[1]: $string(payload) \t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "8f7137cf51e096bd"
            ]
        ]
    },
    {
        "id": "d2ef4f394ab68802",
        "type": "comment",
        "z": "1bd86210b503b896",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "568134e56a4b9c50",
        "type": "comment",
        "z": "1bd86210b503b896",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "0631f1904d640c1e",
        "type": "subflow:54c1e80336f93e12",
        "z": "9c0a52e2454bab6f",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "11df2cac00d5b704",
        "type": "websocket in",
        "z": "9c0a52e2454bab6f",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "b007e747dc67988c"
            ]
        ]
    },
    {
        "id": "b007e747dc67988c",
        "type": "json",
        "z": "9c0a52e2454bab6f",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "f29f0c1b62c53d1c"
            ]
        ]
    },
    {
        "id": "385b7d35500651b6",
        "type": "inject",
        "z": "9c0a52e2454bab6f",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "a2c449c8cfa5c38c"
            ]
        ]
    },
    {
        "id": "a2c449c8cfa5c38c",
        "type": "function",
        "z": "9c0a52e2454bab6f",
        "name": "add Slider",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n    node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<Typography>' + env.get('label') + '</Typography>'\n         + '<Slider onChange={(e,v) => ws.send(JSON.stringify({\"id\":\"' + subflowId + '\",\"payload\":v}))} />'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "190d3807f2b4cf7b",
        "type": "comment",
        "z": "9c0a52e2454bab6f",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "f29f0c1b62c53d1c",
        "type": "switch",
        "z": "9c0a52e2454bab6f",
        "name": "check subflow id",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$reverse($env('NR_NODE_PATH').$split('/'))[1]",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "059c4bfd1f783c27"
            ]
        ]
    },
    {
        "id": "726db7b798868a73",
        "type": "comment",
        "z": "9c0a52e2454bab6f",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "059c4bfd1f783c27",
        "type": "change",
        "z": "9c0a52e2454bab6f",
        "name": "Set timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "015d616a4e3bf693",
        "type": "comment",
        "z": "9c0a52e2454bab6f",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd186aa6a265fc5d",
        "type": "function",
        "z": "520a10812173e701",
        "name": "stash key value ",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nmsg.stash[key].push(JSON.parse(JSON.stringify(msg[key] || '')))\nif (env.get('clear')) {\n    msg[key] = undefined;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "40226d5093552176",
        "type": "function",
        "z": "a25be0e127fc9e24",
        "name": "pop",
        "func": "if (!msg.stash){\n    msg.stash = {}\n}\n\nconst key = env.get('key')\n\nif (!msg.stash[key]){\n    msg.stash[key] = []\n}\n\nlet depth = env.get('depth')\n\nwhile (depth){\n    const stash = msg.stash[key].pop()\n    if (env.get('apply')){\n        msg[key] = stash;\n    }\n    // @ts-ignore\n    depth--;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9d93e67707347e32",
        "type": "status",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "77e60c255444c236",
        "type": "debug",
        "z": "f8d5a5a4f2b87c52",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 420,
        "wires": []
    },
    {
        "id": "95f92e2896b1f816",
        "type": "subflow:b7d91a580a2c7c19",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse json codeblocks",
        "env": [
            {
                "name": "blockTypes",
                "value": "json",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "869689982e74b4dc"
            ]
        ]
    },
    {
        "id": "b638cbdff3ea7ed5",
        "type": "subflow:a25be0e127fc9e24",
        "z": "f8d5a5a4f2b87c52",
        "name": "restore spliced history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "95f92e2896b1f816"
            ]
        ]
    },
    {
        "id": "869689982e74b4dc",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "get result",
        "func": "const cached = msg.payload;\nmsg.payload = msg.payload\n                .filter(({type}) => type === 'json')\n\nif (!msg.payload.length) {\n    console.error('bad payload', cached)\n    throw new Error('no payload')\n}\n\nfunction preprocessJson(jsonString) {\n  // Regex to match unescaped double quotes and backslashes\n  const regex = /(?:\\\\[\\\\\"]|[^\\\\\"])*\"|\\\\./g;\n\n  // Replace callback function\n  function replacer(match) {\n    if (match === '\\\\') {\n      return '\\\\\\\\';\n    }\n    if (match === '\"') {\n      return '\\\\\"';\n    }\n    return match;\n  }\n\n  // Preprocess the JSON string\n  const preprocessedJsonString = jsonString.replace(regex, (match) => {\n    // If the match is a double quote or a backslash, escape it\n    if (match === '\"' || match === '\\\\') {\n      return '\\\\' + match;\n    }\n    return match;\n  });\n\n  return preprocessedJsonString;\n}\n\nmsg.payload = msg.payload[0].content\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 460,
        "wires": [
            [
                "b2728fc75e03f928"
            ]
        ]
    },
    {
        "id": "ca8f33ee37a06e27",
        "type": "function",
        "z": "f8d5a5a4f2b87c52",
        "name": "splice history",
        "func": "\nconst stashedHistory = msg.stash.history[msg.stash.history.length - 1];\n\nstashedHistory[stashedHistory.length - 1] = msg.history.pop()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "b638cbdff3ea7ed5"
            ]
        ]
    },
    {
        "id": "25e9760c313f1739",
        "type": "json",
        "z": "f8d5a5a4f2b87c52",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2c5ea07fe592c94f",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "fix empty",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "you didn't respond with a valid GFM codeblock.\n\nremember, it should look like:\n```json\n['your','json','here']\n```",
        "output": "str",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "a688491534987069",
        "type": "template",
        "z": "f8d5a5a4f2b87c52",
        "name": "fix schema",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "your output failed to parse with the following error:\n\n{{{error.message}}}\n\n{{{format}}}\n\nplease provide a fixed output.",
        "output": "str",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "384314168ce8ee86"
            ]
        ]
    },
    {
        "id": "9dc4e0542924d838",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "2c5ea07fe592c94f"
            ]
        ]
    },
    {
        "id": "e1d90703b7ce3a13",
        "type": "subflow:520a10812173e701",
        "z": "f8d5a5a4f2b87c52",
        "name": "stash history",
        "env": [
            {
                "name": "key",
                "value": "history",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "a688491534987069"
            ]
        ]
    },
    {
        "id": "06989b788e021dca",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "catch empty",
        "scope": [
            "869689982e74b4dc"
        ],
        "uncaught": false,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "9dc4e0542924d838"
            ]
        ]
    },
    {
        "id": "719bb2e65b5f411f",
        "type": "catch",
        "z": "f8d5a5a4f2b87c52",
        "name": "catch schema",
        "scope": [
            "25e9760c313f1739"
        ],
        "uncaught": false,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "e1d90703b7ce3a13"
            ]
        ]
    },
    {
        "id": "b2728fc75e03f928",
        "type": "subflow:9f31d45ecb1d3482",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 500,
        "wires": [
            [
                "25e9760c313f1739"
            ]
        ]
    },
    {
        "id": "64d95ba33b6a42ce",
        "type": "subflow:237429fb2a5a7712",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "x": 280,
        "y": 300,
        "wires": [
            [
                "ca8f33ee37a06e27"
            ]
        ]
    },
    {
        "id": "384314168ce8ee86",
        "type": "change",
        "z": "f8d5a5a4f2b87c52",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "msg",
                "to": "0.3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 260,
        "wires": [
            [
                "64d95ba33b6a42ce",
                "77e60c255444c236"
            ]
        ]
    },
    {
        "id": "2e735c4a9c5e9433",
        "type": "subflow:54c1e80336f93e12",
        "z": "c9fb680bbb1d67cc",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "52fc2e94c2d9bbfe",
        "type": "websocket in",
        "z": "c9fb680bbb1d67cc",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "7892a151c2fa4416"
            ]
        ]
    },
    {
        "id": "7892a151c2fa4416",
        "type": "json",
        "z": "c9fb680bbb1d67cc",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "8e9eb63f483fa076"
            ]
        ]
    },
    {
        "id": "358a4130527d37ff",
        "type": "inject",
        "z": "c9fb680bbb1d67cc",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "840c9e20f5b9f71e"
            ]
        ]
    },
    {
        "id": "840c9e20f5b9f71e",
        "type": "function",
        "z": "c9fb680bbb1d67cc",
        "name": "add Switch",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n  node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<Switch onChange={(e) => ws.send(JSON.stringify({\"id\":\"' + subflowId + '\",\"payload\":e.target.checked}))} />'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "135e261514f1ad24",
        "type": "comment",
        "z": "c9fb680bbb1d67cc",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "8e9eb63f483fa076",
        "type": "switch",
        "z": "c9fb680bbb1d67cc",
        "name": "check subflow id",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$reverse($env('NR_NODE_PATH').$split('/'))[1]",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "0e58721bf2c05cd1"
            ]
        ]
    },
    {
        "id": "45e79486a584ce56",
        "type": "comment",
        "z": "c9fb680bbb1d67cc",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "0e58721bf2c05cd1",
        "type": "change",
        "z": "c9fb680bbb1d67cc",
        "name": "Set timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "de01d4701d291bc5",
        "type": "comment",
        "z": "c9fb680bbb1d67cc",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "c306926b9536fe15",
        "type": "template",
        "z": "f16c08b0c74d892d",
        "name": "set task to payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{persona}}}\n\n{{{requirements}}}\n\n{{{format}}}\n\n{{{task}}}\n",
        "output": "str",
        "x": 210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "75f084451f29062c",
        "type": "subflow:54c1e80336f93e12",
        "z": "aec0d9b3a72479a3",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "37310f234624a1fe",
        "type": "websocket out",
        "z": "aec0d9b3a72479a3",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 420,
        "y": 260,
        "wires": []
    },
    {
        "id": "8f3ee5dbe2a9ff34",
        "type": "inject",
        "z": "aec0d9b3a72479a3",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "17953ff2f5fa284c"
            ]
        ]
    },
    {
        "id": "17953ff2f5fa284c",
        "type": "function",
        "z": "aec0d9b3a72479a3",
        "name": "add plot",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nglobal.set('init[' + env.get('order') + ']',\n           'setTimeout(function () { setData({...data, ...{\"' + subflowId + '\":\"' + env.get('label') + '\"}})}, Math.random()*100);');\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n  node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<Typography display=\"flex\" alignItems=\"center\" minHeight=\"0.8\">{data[\"' + subflowId + '\"]}</Typography>'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "69ed19aefd522b59",
        "type": "comment",
        "z": "aec0d9b3a72479a3",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "5e64d43f85e220d5",
        "type": "change",
        "z": "aec0d9b3a72479a3",
        "name": "create data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   $reverse($env('NR_NODE_PATH').$split('/'))[1]: $string(payload) \t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "37310f234624a1fe"
            ]
        ]
    },
    {
        "id": "f82d05f49f9f0670",
        "type": "comment",
        "z": "aec0d9b3a72479a3",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "496ec17de92941f8",
        "type": "comment",
        "z": "aec0d9b3a72479a3",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "ae8721aba548d910",
        "type": "subflow:54c1e80336f93e12",
        "z": "eceae5246a022264",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "d6f6c31cbe3a0485",
        "type": "websocket in",
        "z": "eceae5246a022264",
        "name": "",
        "server": "caaba1e23b7b4c41",
        "client": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "f64b5c4fc72ff9b9"
            ]
        ]
    },
    {
        "id": "f64b5c4fc72ff9b9",
        "type": "json",
        "z": "eceae5246a022264",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "5556b55a273722df"
            ]
        ]
    },
    {
        "id": "f0a3065f48935431",
        "type": "inject",
        "z": "eceae5246a022264",
        "name": "add component",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "82bcdf899a6a7165"
            ]
        ]
    },
    {
        "id": "82bcdf899a6a7165",
        "type": "function",
        "z": "eceae5246a022264",
        "name": "add TextField",
        "func": "var subflowId = env.get('NR_NODE_PATH').split('/').reverse()[1];\n\nif (global.get('jsx[' + env.get('order') + ']')) {\n  node.warn(\"order conflicted\");\n}\n\nglobal.set('jsx[' + env.get('order') + ']',\n           '<Grid item xs={' + env.get('xs') + '}>'\n         + '<TextField fullWidth label=\"' + env.get('label') + '\" variant=\"standard\" onChange={(e) => ws.send(JSON.stringify({\"id\":\"' + subflowId + '\",\"payload\":e.target.value}))} />'\n         + '</Grid>');\n\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "1ca26faaaa27afd0",
        "type": "comment",
        "z": "eceae5246a022264",
        "name": "Add the UI component to `jsx` in the global context",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "5556b55a273722df",
        "type": "switch",
        "z": "eceae5246a022264",
        "name": "check subflow id",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$reverse($env('NR_NODE_PATH').$split('/'))[1]",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "56af47fb510e7ad0"
            ]
        ]
    },
    {
        "id": "920b0187184deda2",
        "type": "comment",
        "z": "eceae5246a022264",
        "name": "Endpoint for the dashboard",
        "info": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "56af47fb510e7ad0",
        "type": "change",
        "z": "eceae5246a022264",
        "name": "Set timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "dc7f44e04a7451a8",
        "type": "comment",
        "z": "eceae5246a022264",
        "name": "UI specific handling",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "1067c84f3e71a1e0",
        "type": "function",
        "z": "d5c9fa98eff91292",
        "name": "set max tokens getter",
        "func": "Object.defineProperty(msg, \"max_tokens\", {\n    get: function () {\n        const payloadLength = this.payload.length;\n        const contentLength = (this.history || []).reduce((sum, item) => {\n            return sum + (item.content ? item.content.length : 0);\n        }, 0);\n        return 4000 - (contentLength + payloadLength) / 2;\n    },\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "51f0b93f4b904c5f",
        "type": "template",
        "z": "5bc0bb14eb5eea59",
        "name": "instruct to return bash commands",
        "field": "format",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "give your answer in the form of a valid bash command(s)\n\n{{{format}}}",
        "output": "str",
        "x": 260,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6d9d5d4bb14ed8aa",
        "type": "function",
        "z": "a54b6077b1444737",
        "name": "clone message",
        "func": "return RED.util.cloneMessage(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0773bcf3416404",
        "type": "chatgpt",
        "z": "237429fb2a5a7712",
        "name": "",
        "API_KEY": "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",
        "Organization": " ",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 280,
        "y": 200,
        "wires": [
            [
                "d2ee1fb0b75e93b6"
            ]
        ]
    },
    {
        "id": "056755aef7aa376e",
        "type": "status",
        "z": "237429fb2a5a7712",
        "name": "",
        "scope": null,
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1ffc34a3a1a366d1",
        "type": "debug",
        "z": "237429fb2a5a7712",
        "name": "debug gpt input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "5319c261f38a4760",
        "type": "debug",
        "z": "237429fb2a5a7712",
        "name": "debug gpt output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 460,
        "wires": []
    },
    {
        "id": "11a66484df90d49b",
        "type": "debug",
        "z": "237429fb2a5a7712",
        "name": "debug console",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "d7e95670637a4f94",
        "type": "debug",
        "z": "237429fb2a5a7712",
        "name": "debug console",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 300,
        "wires": []
    },
    {
        "id": "5d459fc8-eec7-4ace-94e5-b653c47e5061",
        "type": "function",
        "z": "237429fb2a5a7712",
        "name": "ensure token headroom",
        "func": "const encode = gpt3Encoder.encode;\nmsg.topic = msg.topic || 'turbo';\nconsole.log('msg.max_tokens', msg.max_tokens, msg.history)\nif (!msg.max_tokens) {\n    let sum = (msg.history || []).filter(e => e).reduce((acc, cur) => acc + encode(cur.content).length, 0);\n    sum += encode(msg.payload).length;\n    sum += 100; // give the encoder some wiggle room\n    if (env.get('auto4')\n    && (msg.topic !== 'gpt4') \n    // @ts-ignore\n    && (4096 - sum < (msg.min_tokens || 0))) {\n        msg.topic = 'gpt4'\n    }\n\n    if (env.get('auto4')\n    && (msg.topic == 'gpt4')\n    && (4096 - sum > (msg.min_tokens || 0))){\n        msg.topic = 'turbo';\n    }\n    \n    msg.max_tokens = ((msg.topic === 'gpt4') ? 8192 : 4096) - sum;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gpt3Encoder",
                "module": "gpt-3-encoder"
            }
        ],
        "x": 330,
        "y": 160,
        "wires": [
            [
                "1d0773bcf3416404",
                "1ffc34a3a1a366d1",
                "11a66484df90d49b"
            ]
        ]
    },
    {
        "id": "d2ee1fb0b75e93b6",
        "type": "subflow:f9e0ec91.e767e",
        "z": "237429fb2a5a7712",
        "name": "minify JSON in history",
        "x": 320,
        "y": 240,
        "wires": [
            [
                "2d60fcbd28eb92c7",
                "5319c261f38a4760",
                "d7e95670637a4f94"
            ]
        ]
    },
    {
        "id": "2d60fcbd28eb92c7",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "clear max_tokens",
        "rules": [
            {
                "t": "delete",
                "p": "max_tokens",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "d5f444de1f8ceabb"
            ]
        ]
    },
    {
        "id": "b636b9ea5bf45435",
        "type": "subflow:520a10812173e701",
        "z": "237429fb2a5a7712",
        "name": "stash topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            },
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "5d459fc8-eec7-4ace-94e5-b653c47e5061"
            ]
        ]
    },
    {
        "id": "d5f444de1f8ceabb",
        "type": "subflow:a25be0e127fc9e24",
        "z": "237429fb2a5a7712",
        "name": "restore topic",
        "env": [
            {
                "name": "key",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "496859a8d075feeb",
        "type": "catch",
        "z": "237429fb2a5a7712",
        "name": "",
        "scope": [
            "1d0773bcf3416404"
        ],
        "uncaught": false,
        "x": 90,
        "y": 440,
        "wires": [
            [
                "5319c261f38a4760",
                "b5898d96fe66bae2"
            ]
        ]
    },
    {
        "id": "b5898d96fe66bae2",
        "type": "delay",
        "z": "237429fb2a5a7712",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 440,
        "wires": [
            [
                "38a6f55d7caf7243"
            ]
        ]
    },
    {
        "id": "38a6f55d7caf7243",
        "type": "change",
        "z": "237429fb2a5a7712",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "error",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 380,
        "wires": [
            [
                "1d0773bcf3416404"
            ]
        ]
    },
    {
        "id": "b9ea49f2da759d2d",
        "type": "template",
        "z": "abe04720c71db29a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Please fix the following issues:\n\n{{{payload}}}",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "09d6a2e7edeb3fdb"
            ]
        ]
    },
    {
        "id": "d8a039a79bee29c9",
        "type": "function",
        "z": "abe04720c71db29a",
        "name": "squash history",
        "func": "msg.history = [msg.history[0], msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c9749c0bad31bb2a",
        "type": "status",
        "z": "abe04720c71db29a",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "09d6a2e7edeb3fdb",
        "type": "subflow:50df1246bdaf5119",
        "z": "abe04720c71db29a",
        "name": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "d8a039a79bee29c9"
            ]
        ]
    },
    {
        "id": "c11c22bfa659e956",
        "type": "change",
        "z": "01f8323836f16cca",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "max_tokens",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "ea63b5fe22a6ee92"
            ]
        ]
    },
    {
        "id": "9bb84b4abd59e31b",
        "type": "subflow:520a10812173e701",
        "z": "01f8323836f16cca",
        "name": "stash max tokens",
        "env": [
            {
                "name": "key",
                "value": "max_tokens",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "c11c22bfa659e956"
            ]
        ]
    },
    {
        "id": "8931fcba19a35d88",
        "type": "subflow:a25be0e127fc9e24",
        "z": "01f8323836f16cca",
        "name": "restore max tokens",
        "env": [
            {
                "name": "key",
                "value": "max_tokens",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "3d6ef8763046ceac"
            ]
        ]
    },
    {
        "id": "ea63b5fe22a6ee92",
        "type": "subflow:237429fb2a5a7712",
        "z": "01f8323836f16cca",
        "name": "",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "8931fcba19a35d88"
            ]
        ]
    },
    {
        "id": "3d6ef8763046ceac",
        "type": "switch",
        "z": "01f8323836f16cca",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "YES",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "NO",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 230,
        "y": 360,
        "wires": [
            [
                "a14bafbb9ae8657e"
            ],
            [
                "2db0f5f35db96af0"
            ],
            [
                "b534d1936b538070"
            ]
        ]
    },
    {
        "id": "0cedb9219c603c43",
        "type": "status",
        "z": "01f8323836f16cca",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7879fb21d83d28bf",
        "type": "subflow:520a10812173e701",
        "z": "01f8323836f16cca",
        "name": "stash payload",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "9bb84b4abd59e31b"
            ]
        ]
    },
    {
        "id": "b534d1936b538070",
        "type": "subflow:a25be0e127fc9e24",
        "z": "01f8323836f16cca",
        "name": "restore payload",
        "x": 260,
        "y": 420,
        "wires": [
            [
                "e5c5ec0dfa540e85"
            ]
        ]
    },
    {
        "id": "a14bafbb9ae8657e",
        "type": "subflow:a25be0e127fc9e24",
        "z": "01f8323836f16cca",
        "name": "throw away payload stash",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 470,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2db0f5f35db96af0",
        "type": "subflow:a25be0e127fc9e24",
        "z": "01f8323836f16cca",
        "name": "throw away payload stash",
        "env": [
            {
                "name": "apply",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 470,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3a31617b.ee3d8a",
        "type": "exec",
        "z": "a14f5a91.f5c0b",
        "command": "echo Hello world",
        "addpay": true,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "oldrc": false,
        "name": "echo",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "44e848e7.2a27e4"
            ],
            [
                "fa799ba7.1d5bc8"
            ],
            []
        ]
    },
    {
        "id": "44e848e7.2a27e4",
        "type": "join",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 250,
        "y": 40,
        "wires": [
            [
                "c39aed08.2c3ee"
            ]
        ]
    },
    {
        "id": "fa799ba7.1d5bc8",
        "type": "join",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "3c42708d.72b206"
            ]
        ]
    },
    {
        "id": "c39aed08.2c3ee",
        "type": "switch",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "property": "rc",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 40,
        "wires": [
            [
                "1f4c44e7.53c22c"
            ]
        ]
    },
    {
        "id": "1f4c44e7.53c22c",
        "type": "json",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3c42708d.72b206",
        "type": "template",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "There was an execution error:\n{{payload.stderr}}\n{{payload.stdout}}",
        "output": "json",
        "x": 400,
        "y": 100,
        "wires": [
            [
                "40c56f32.d4e2f"
            ]
        ]
    },
    {
        "id": "40c56f32.d4e2f",
        "type": "json",
        "z": "a14f5a91.f5c0b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ffdcd61d.64da38",
        "type": "function",
        "z": "f9e0ec91.e767e",
        "name": "minify-json",
        "func": "const inputList = Array.isArray(msg.history) ? msg.history : [];\n\ninputList.forEach((item) => {\n  item.content = item.content.replace(/```json\\n([\\s\\S]*?)\\n```/g, (match, codeBlock) => {\n      try {\n          codeBlock = codeBlock.split('\\n').join().split('\\r').join()\n          const parsedJson = JSON.parse(codeBlock);\n          const minifiedJsonString = JSON.stringify(parsedJson);\n          return '```json\\n' + minifiedJsonString + '\\n```';\n      } catch (error) {\n          return match;\n      }\n  });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a9ae170a-1f25-4488-bb72-4962d3f327c7",
        "type": "function",
        "z": "67a8cabd-79e0-47ab-ba52-51b8d78cb688",
        "name": "ComputeTokens",
        "func": "if (!msg || !Array.isArray(msg.history) || !msg.full || !msg.full.data || !msg.full.data.usage) {\n  msg.error = 'Invalid input format.';\n  return msg;\n}\n\nif (msg.history.length < 2) {\n  msg.error = 'msg.history must have a length of at least 2.';\n  return msg;\n}\n\nlet sum = msg.history.reduce((acc, item) => acc + (item.tokens || 0), 0);\n\nlet diff = (msg.full.data.usage.prompt_tokens ?? 0) - sum;\nmsg.history[msg.history.length - 2].tokens = diff >= 0 ? diff : 0;\nmsg.history[msg.history.length - 1].tokens = msg.full.data.usage.completion_tokens ?? 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "63dba49296c3a9e4",
        "type": "template",
        "z": "9f31d45ecb1d3482",
        "name": "set validation schema",
        "field": "schema",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\"id\", \"type\"],\n    \"properties\": {\n      \"nodes\": {\n        \"not\": {\n          \"type\": \"array\"\n        }\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"info\": {\n        \"type\": \"string\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"in\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"wires\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"out\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"x\": {\n              \"type\": \"number\"\n            },\n            \"y\": {\n              \"type\": \"number\"\n            },\n            \"wires\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [],\n                \"properties\": {\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"port\": {\n                    \"type\": \"number\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"env\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [],\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"type\": {\n              \"type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"meta\": {\n        \"type\": \"object\",\n        \"required\": [],\n        \"properties\": {}\n      },\n      \"color\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}",
        "output": "json",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cf072eee9e78f126"
            ]
        ]
    },
    {
        "id": "cf072eee9e78f126",
        "type": "change",
        "z": "9f31d45ecb1d3482",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "schemaString",
                "pt": "msg",
                "to": "$string(schema)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "31d7c39f9a6c8c97",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "merge",
        "func": "msg.history = [msg.history[0], msg.history[1]]\n\nmsg.history[1].content = `\nhere are ${msg.payload.length} options:\n${msg.payload.map((t,i) => `\n---${i} START---\n${t}\n---${i} END---\n`).join('\\n')}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "83096e44fc2c289e"
            ]
        ]
    },
    {
        "id": "a6038949892555d8",
        "type": "subflow:520a10812173e701",
        "z": "50df1246bdaf5119",
        "name": "stash payload",
        "env": [
            {
                "name": "clear",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 160,
        "y": 80,
        "wires": [
            [
                "189d162c7a1def8e"
            ]
        ]
    },
    {
        "id": "83096e44fc2c289e",
        "type": "template",
        "z": "50df1246bdaf5119",
        "name": "fixer",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a researcher tasked with investigating the 3 response options below.\nList the issues with each option, ranking each by severity.\nAlso list what each option gets right, and which takes the overall best approach.\n",
        "output": "str",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "ef9999d2ba3d2f28"
            ]
        ]
    },
    {
        "id": "ef9999d2ba3d2f28",
        "type": "subflow:02409038fd9362ee",
        "z": "50df1246bdaf5119",
        "name": "",
        "env": [
            {
                "name": "bundle",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 150,
        "y": 360,
        "wires": [
            [
                "c5022a931a9bcb7b"
            ]
        ]
    },
    {
        "id": "c5022a931a9bcb7b",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "merge history",
        "func": "msg.history = [msg.history.pop()[0], msg.history[msg.history.length - 1]]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "189d162c7a1def8e",
        "type": "function",
        "z": "50df1246bdaf5119",
        "name": "copy",
        "func": "const num_copies = env.get(\"num_copies\") || 1;\nconst copies = [];\nfor(let i = 0; i < num_copies; i++){\n    copies.push(msg.payload);\n}\n\nmsg.payload = copies;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "95fe1a4f7ccf06fb"
            ]
        ]
    },
    {
        "id": "95fe1a4f7ccf06fb",
        "type": "split",
        "z": "50df1246bdaf5119",
        "name": "split copies",
        "splt": "",
        "spltType": "msg",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "432af7d250ee4197"
            ]
        ]
    },
    {
        "id": "432af7d250ee4197",
        "type": "subflow:02409038fd9362ee",
        "z": "50df1246bdaf5119",
        "name": "",
        "env": [
            {
                "name": "bundle",
                "value": "bundle",
                "type": "env"
            }
        ],
        "x": 150,
        "y": 200,
        "wires": [
            [
                "0e3ce1809b54fad7"
            ]
        ]
    },
    {
        "id": "0e3ce1809b54fad7",
        "type": "join",
        "z": "50df1246bdaf5119",
        "name": "join copies",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "31d7c39f9a6c8c97"
            ]
        ]
    },
    {
        "id": "587cc92797acd5f3",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "add last line",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{payload}}}\n\nLet's work this out in a step by step way to be sure we have the right answer:",
        "output": "str",
        "x": 230,
        "y": 40,
        "wires": [
            [
                "94270be7a7e81ed1"
            ]
        ]
    },
    {
        "id": "94270be7a7e81ed1",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "02498ebad85fca04"
            ]
        ]
    },
    {
        "id": "4c18e4ef1378f85f",
        "type": "subflow:d295481a52b8fd83",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bc85a1ac4b1b979e",
        "type": "template",
        "z": "02409038fd9362ee",
        "name": "bundle",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "now put it all together according to the original question.\n\nbe sure to obey the formatting rules.",
        "output": "str",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "5392474c6ec89e72"
            ]
        ]
    },
    {
        "id": "02498ebad85fca04",
        "type": "switch",
        "z": "02409038fd9362ee",
        "name": "bundle?",
        "property": "bundle",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 140,
        "wires": [
            [
                "bc85a1ac4b1b979e"
            ],
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "5392474c6ec89e72",
        "type": "subflow:237429fb2a5a7712",
        "z": "02409038fd9362ee",
        "name": "",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "4c18e4ef1378f85f"
            ]
        ]
    },
    {
        "id": "07ae0da70cee4ba6",
        "type": "function",
        "z": "d295481a52b8fd83",
        "name": "function 1",
        "func": "msg.history = [msg.history[env.get('start')],msg.history[msg.history.length - 1]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "490a23128bcd3aed",
        "type": "function",
        "z": "e62244fb88b22d11",
        "name": "",
        "func": "const nodes = msg.payload;\nconst subflows = {};\n\nnodes.forEach(node => {\n  if (node.type === 'subflow') {\n    subflows[node.id] = {nodes: [], subflows: 0};\n  }\n});\n\nnodes.forEach(node => {\n  if (node.z && subflows[node.z]) {\n      subflows[node.z].nodes.push({...node});\n      if (node.type.startsWith('subflow:')) {\n          subflows[node.z].subflows++;\n      }\n  }\n});\n\nmsg.payload = Object.values(subflows);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "b943630c2aa10892"
            ]
        ]
    },
    {
        "id": "b943630c2aa10892",
        "type": "json",
        "z": "e62244fb88b22d11",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "84f6c912.6d8e78",
        "type": "function",
        "z": "filter-subflows",
        "name": "Filter Valid Nodes",
        "func": "let outputArray = []\n\nfor(let i = 0; i < msg.payload.length; i++){\n  const nodes = msg.payload[i].nodes\n  let infoFilledSubflows = 1\n  let containsSubflow = false\n  let isValid = true\n      \n  if(Array.isArray(nodes)){\n    for(let j = 0; j < nodes.length; j++){\n      if(nodes[j].type.startsWith(\"subflow:\")){\n        containsSubflow = true\n        const subflowId = nodes[j].type.substr(8)\n        for(let k = 0; k < msg.payload.length; k++){\n          if(msg.payload[k].id === subflowId && msg.payload[k].info !== \"\"){\n            infoFilledSubflows++\n          }\n        }\n      } else {\n        infoFilledSubflows++;\n      }  \n    }  \n  }\n        \n  if(containsSubflow && infoFilledSubflows !== nodes.length){\n    isValid = false\n  }\n  \n  if(isValid){\n    outputArray.push(JSON.stringify(msg.payload[i]))\n  }\n}\n  \nfor(let i = 0; i < outputArray.length; i++){\n  node.send({payload: outputArray[i]})\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4e4e4344.47462c",
        "type": "inject",
        "z": "a10c9763.cb7f38",
        "name": "Start monitoring",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "af07e5b5.f44958"
            ]
        ]
    },
    {
        "id": "d5c664bd.2e15c8",
        "type": "watch",
        "z": "a10c9763.cb7f38",
        "name": "Watch flows.json",
        "files": "",
        "recursive": false,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "af07e5b5.f44958"
            ]
        ]
    },
    {
        "id": "af07e5b5.f44958",
        "type": "file in",
        "z": "a10c9763.cb7f38",
        "name": "Read flows.json",
        "filename": "{{flows_file_path}}",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "963be666.745e58"
            ]
        ]
    },
    {
        "id": "963be666.745e58",
        "type": "json",
        "z": "a10c9763.cb7f38",
        "name": "Parse JSON content",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 820,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "analyzeSubflows",
        "type": "function",
        "z": "detect_changes_subflow",
        "name": "Analyze Subflows",
        "func": "const currentSubflows=msg.payload.filter(node=>node.type.startsWith('subflow:'));const updatedSubflows=[];const lastKnownVersions=context.get('lastKnownVersions')||{};currentSubflows.forEach(subflow=>{const{id,type,version}=subflow;const lastVersion=lastKnownVersions[id];if(!lastVersion||lastVersion!==version){updatedSubflows.push(subflow);lastKnownVersions[id]=version;}});context.set('lastKnownVersions',lastKnownVersions);msg.updatedSubflows=updatedSubflows;return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "32876e70b1f01560",
        "type": "join",
        "z": "529552c35927a0b3",
        "name": "join copies",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "count",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 657,
        "y": 255,
        "wires": [
            [
                "d2fc30b2c252d03e"
            ]
        ]
    },
    {
        "id": "7716143184bbcaff",
        "type": "debug",
        "z": "529552c35927a0b3",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "d2fc30b2c252d03e",
        "type": "debug",
        "z": "529552c35927a0b3",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 140,
        "wires": []
    },
    {
        "id": "function_node_id",
        "type": "function",
        "z": "subflow_id",
        "name": "WriteToFileFunction",
        "func": "console.log('write msg',msg)\nconst id = msg.payload.id;\nconst directory = env.get('FILE_DIRECTORY');\nmsg.payload = JSON.stringify(msg.payload, null, '\\t');\nfs.writeFile(`${directory}/${id}.json`, msg.payload, function(err) {\n    if (err) {\n        node.error(`Error writing file: ${err}`);\n    }\n    return msg;\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 230,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c4dadc8e7a05dc19",
        "type": "debug",
        "z": "subflow_id",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "3d449d7ffb7d894a",
        "type": "subflow:fe8c349f5351690d",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "x": 550,
        "y": 140,
        "wires": [
            [
                "96f4122dca845707"
            ],
            []
        ]
    },
    {
        "id": "693acb6b98db1f88",
        "type": "subflow:6f4063c49a1c2fcf",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "env": [
            {
                "name": "iterations",
                "value": "3",
                "type": "num"
            }
        ],
        "x": 560,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7569773f67387c63",
        "type": "file",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "filename": "testout.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 350,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "96f4122dca845707",
        "type": "file",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "filename": "critique.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 550,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d0ee95a6411ee0ab",
        "type": "subflow:f8d5a5a4f2b87c52",
        "z": "78a172cd8b4d25eb",
        "name": "flow validation",
        "x": 360,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d5f13b0b34975047",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "78a172cd8b4d25eb",
        "name": "generate initial flow",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "d0ee95a6411ee0ab"
            ]
        ]
    },
    {
        "id": "bbd35dad4814b2c4",
        "type": "inject",
        "z": "78a172cd8b4d25eb",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "requirements",
                "v": "I need a subflow that will read flows.json file as a json array, parse it,sort by obj.name, and then write the file back. it should also make a backup file in case of error.",
                "vt": "str"
            },
            {
                "p": "task",
                "v": "Please output the entire node-red flow.",
                "vt": "str"
            },
            {
                "p": "max_tokens",
                "v": "2000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "8b2b31e8645d67b5"
            ]
        ]
    },
    {
        "id": "8b2b31e8645d67b5",
        "type": "file in",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "filename": "flows.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 100,
        "y": 260,
        "wires": [
            [
                "62a799d0aa5f212c"
            ]
        ]
    },
    {
        "id": "f311c9b2d78e2d00",
        "type": "file",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "filename": "deps.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "62a799d0aa5f212c",
        "type": "json",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 230,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ad1adc157a1ffd41",
        "type": "subflow:50df1246bdaf5119",
        "z": "78a172cd8b4d25eb",
        "name": "",
        "x": 340,
        "y": 580,
        "wires": [
            [
                "7c50bd6a043342d0"
            ]
        ]
    },
    {
        "id": "7c50bd6a043342d0",
        "type": "debug",
        "z": "78a172cd8b4d25eb",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 440,
        "wires": []
    },
    {
        "id": "f33752b6e93c55dc",
        "type": "inject",
        "z": "78a172cd8b4d25eb",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "task",
                "v": "Please output the entire node-red flow.",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "gpt4",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "44d31b4b6965d8ec"
            ]
        ]
    },
    {
        "id": "44d31b4b6965d8ec",
        "type": "template",
        "z": "78a172cd8b4d25eb",
        "name": "requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "I need a node-red subflow that will take as input a flat node-red export of nodes and return a dependency graph of all the subflows within.\n\nit should expect msg.payload of the input to be a javascript array of nodes.\n\nignore any nodes that are not themselves a subflow definition, instance, or part of a subflow.\n\na node that is a subflow definition will have \"type\" of \"subflow\"\n\na node that is part of a subflow will have a 'z' property that is the id of the subflow node\n\na node that is an instance of a subflow will have 'type' property that is 'subflow:{SUBFLOW_ID}' with {SUBFLOW_ID} being the id of the subflow definition node\n\nthe subflow you write should output a single array of objects with the following properties:\n\nid: id of the subflow\nnodes: clones of all the the nodes in the subflow, including other subflow instances.\nsubflows: count of how many of the nodes in the subflow are themselves instances of subflows\n",
        "output": "str",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "680d630594cb8fdc"
            ]
        ]
    },
    {
        "id": "425f475e7e60de12",
        "type": "subflow:f16c08b0c74d892d",
        "z": "78a172cd8b4d25eb",
        "name": "bundle prompt",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "ad1adc157a1ffd41"
            ]
        ]
    },
    {
        "id": "c04738ceb4772730",
        "type": "subflow:a5f18db0d45889f2",
        "z": "78a172cd8b4d25eb",
        "name": "set format to node-red subflow",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "5c12ecefb7a9f031"
            ]
        ]
    },
    {
        "id": "680d630594cb8fdc",
        "type": "subflow:f6dd154f310aa615",
        "z": "78a172cd8b4d25eb",
        "name": "set persona to engineer",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "c04738ceb4772730"
            ]
        ]
    },
    {
        "id": "5c12ecefb7a9f031",
        "type": "subflow:1254546b0e9fb57c",
        "z": "78a172cd8b4d25eb",
        "name": "wrap format instructions",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "425f475e7e60de12"
            ]
        ]
    },
    {
        "id": "3a8317bb66c5c8fb",
        "type": "inject",
        "z": "78a172cd8b4d25eb",
        "name": "turbo",
        "props": [
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "task",
                "v": "Please output the entire node-red flow.",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.5",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 290,
        "y": 360,
        "wires": [
            [
                "44d31b4b6965d8ec"
            ]
        ]
    },
    {
        "id": "dc44f4146178e69c",
        "type": "chatgpt",
        "z": "ae1a045cf8952634",
        "name": "",
        "API_KEY": "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",
        "Organization": " ",
        "topic": "gpt4",
        "BaseUrl": "",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "2886721c077af0a9"
            ]
        ]
    },
    {
        "id": "f630892029b028d2",
        "type": "switch",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "wind",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "holy",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "fire",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ice",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "earth",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "lightning",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "poison",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 950,
        "y": 520,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a09e569b9789dc12",
        "type": "switch",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 950,
        "y": 620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "21fc2e15bd33bce8",
        "type": "http request",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.reddit.com/.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "81254dacf9396b61",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "payload": "success",
        "payloadType": "str",
        "x": 990,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "978ce20453aae444",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 360,
        "wires": []
    },
    {
        "id": "afad379e638057f5",
        "type": "function",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "func": "msg.payload = { \"result\": { \"success\": true }};\nmsg.topic = \"Auto\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "6b667bda6cbdf602",
        "type": "change",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "element",
                "pt": "msg",
                "to": "fire",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "turbo",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "saved",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c47b95ff81fc1300",
        "type": "range",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "minin": "0",
        "maxin": "20",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "",
        "x": 960,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "0701e61c80db9b1f",
        "type": "exec",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "95b39c14ee8685eb"
            ],
            [
                "827283cf8de80f5f"
            ],
            [
                "c2587e5a46b3333a"
            ]
        ]
    },
    {
        "id": "03c5690b02dd0e15",
        "type": "catch",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "",
        "scope": [
            "dc44f4146178e69c",
            "6022cb2397d03ff6",
            "0701e61c80db9b1f",
            "f5b7eedf0256651f"
        ],
        "uncaught": false,
        "x": 630,
        "y": 60,
        "wires": [
            [
                "141f3dd85e9ac7f4"
            ]
        ]
    },
    {
        "id": "46680cd27426e28d",
        "type": "delay",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "f39df16640521d62"
            ]
        ]
    },
    {
        "id": "81ac747dacc8e0e4",
        "type": "file",
        "z": "ae1a045cf8952634",
        "name": "",
        "filename": "testout.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 390,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "464979df52525452",
        "type": "file",
        "z": "ae1a045cf8952634",
        "name": "",
        "filename": "critique.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 410,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "13d16a4d5b63d77d",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "3-way switch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "greater than or equals to 100, less than 100, else",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "6bc47f07e248de42"
            ]
        ]
    },
    {
        "id": "ec86dcac7444de1a",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "8-way switch",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "contains \"wind\", contains \"holy\", contains \"fire\", contains \"ice\", contains \"earth\", contains \"lightning\", contains \"posion\", otherwise",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "6bc47f07e248de42"
            ]
        ]
    },
    {
        "id": "6022cb2397d03ff6",
        "type": "function",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "auto-import-from-clipboard",
        "func": "switch (os.platform()){\n    case \"win32\":\n    return {\n        payload: `cmd.exe /c echo set WshShell = WScript.CreateObject(\"WScript.Shell\") > %temp%\\\\temp.vbs && echo WshShell.SendKeys \"^i\" >> %temp%\\\\temp.vbs && echo WScript.Sleep 250 >> %temp%\\\\temp.vbs && echo WshShell.SendKeys \"^v\" >> %temp%\\\\temp.vbs && echo WScript.Sleep 250 >> %temp%\\\\temp.vbs && echo WshShell.SendKeys \"{TAB}{TAB}{TAB}{TAB}{ENTER}\" >> %temp%\\\\temp.vbs && cscript //nologo %temp%\\\\temp.vbs && del %temp%\\\\temp.vbs`\n    };\n    case \"darwin\":\n    return {\n        payload: `osascript -e 'tell application \"System Events\" to keystroke \"i\" using {command down}' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke \"v\" using {command down}' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke tab' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke tab' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke tab' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke tab' -e 'delay 0.25' -e 'tell application \"System Events\" to keystroke return'`\n    };\n    default:\n        throw new Error(`unsupported platform ${os.platform()}. Consider porting with gpt and submitting a PR!`)   \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "5bb33e2726d7f97b",
                "0701e61c80db9b1f"
            ]
        ]
    },
    {
        "id": "b12f08db05a4ef79",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "change",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "set msg.element to \"fire\", set msg.topic to \"turbo\", move msg.payload to msg.saved",
        "payloadType": "str",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "c65722a64ea5c5a9"
            ]
        ]
    },
    {
        "id": "c65722a64ea5c5a9",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "change node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"change\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured based on the following rules: ```{{{payload}}}```",
        "output": "str",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "141f3dd85e9ac7f4",
        "type": "change",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "close gates",
        "rules": [
            {
                "t": "set",
                "p": "gate",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 60,
        "wires": [
            [
                "5de72de4ac72c198"
            ]
        ]
    },
    {
        "id": "6bfc53cdf3840906",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "comment",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "name",
                "v": "comment made on",
                "vt": "str"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"success\",true]",
        "payloadType": "str",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "07983e9a009caca0"
            ]
        ]
    },
    {
        "id": "29e4d3926399a441",
        "type": "comment",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "comment made on 3/30/2023, 9:59:50 PM",
        "info": "[\"success\",true]",
        "x": 1060,
        "y": 400,
        "wires": []
    },
    {
        "id": "1347e312c3605c84",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "comment node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"comment\" node named {{{name}}} that can be imported into the Node-RED editor. Do not add any additional comments or explanations. The node should contain the following info: ```{{{payload}}}```",
        "output": "str",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "f5b7eedf0256651f",
        "type": "function",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "copy flow to clipboard",
        "func": "let clipboard = msg.payload;\n\nswitch (os.platform()) {\n    case \"win32\":\n        return {\n            payload: `echo ${clipboard} | clip`\n        };\n    case \"darwin\":\n        return {\n            payload: `echo '${clipboard}' | pbcopy`\n        };\n    default:\n        throw new Error(`unsupported platform ${os.platform()}. Consider porting with gpt and submitting a PR!`)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 860,
        "y": 100,
        "wires": [
            [
                "d454ddf8c6febed0",
                "0701e61c80db9b1f",
                "46680cd27426e28d"
            ]
        ]
    },
    {
        "id": "78fe5e7c8a5a98aa",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "display the complete message object",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "84e22af86754b25c"
            ]
        ]
    },
    {
        "id": "d454ddf8c6febed0",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "debug clipboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "5de72de4ac72c198",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "debug errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "2886721c077af0a9",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "name": "debug gpt output",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "5bb33e2726d7f97b",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "debug import",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 200,
        "wires": []
    },
    {
        "id": "a3fd3544e0714d81",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "name": "debug initial prompt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "84e22af86754b25c",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "debug node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"debug\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to: `{{{payload}}}`",
        "output": "str",
        "x": 460,
        "y": 380,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "18716f79f626092a",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "function",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "msg.payload = { \"result\": { \"success\": true }};msg.topic = \"Auto\";return msg;",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "25694714eab84f1f"
            ]
        ]
    },
    {
        "id": "25694714eab84f1f",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "function node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"function\" node that can be imported into the Node-RED editor. Do not add any additional comments or explanations. The node should contain the following JavaScript code: ```{{{payload}}}```",
        "output": "str",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "fe47a79e8f60e54a",
        "type": "switch",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "gate",
        "property": "gate",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "f5b7eedf0256651f"
            ]
        ]
    },
    {
        "id": "f39df16640521d62",
        "type": "switch",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "gate",
        "property": "gate",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 140,
        "wires": [
            [
                "6022cb2397d03ff6"
            ]
        ]
    },
    {
        "id": "414ddee1287efb66",
        "type": "subflow:b53b3b7e24a3e4e7",
        "z": "ae1a045cf8952634",
        "name": "generate initial flow",
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "7c5e2ba298e8f0b8",
                "464979df52525452"
            ]
        ]
    },
    {
        "id": "14ea77e760e4ffc0",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "http",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "GET",
                "vt": "str"
            },
            {
                "p": "url",
                "v": "reddit",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": " to view the front page",
        "payloadType": "str",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "709d2c17b86ff273"
            ]
        ]
    },
    {
        "id": "709d2c17b86ff273",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "http request node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"http request\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to: send a {{type}} request to {{url}}{{payload}}",
        "output": "str",
        "x": 440,
        "y": 820,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "0634c085abe40419",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{ \"payload\": \"success\", \"topic\": \"turbo\" }",
        "payloadType": "str",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "9e04c0a3117e3eed"
            ]
        ]
    },
    {
        "id": "9e04c0a3117e3eed",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "inject node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"inject\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to: send a message object with the following: {{{payload}}}\n",
        "output": "str",
        "x": 460,
        "y": 340,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "600be270c90b5449",
        "type": "change",
        "z": "ae1a045cf8952634",
        "name": "open gates",
        "rules": [
            {
                "t": "set",
                "p": "gate",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "a3fd3544e0714d81",
                "dc44f4146178e69c"
            ]
        ]
    },
    {
        "id": "29bf50db4c2fd003",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "range",
        "props": [
            {
                "p": "input",
                "v": "0-20",
                "vt": "str"
            },
            {
                "p": "output",
                "v": "0-100",
                "vt": "str"
            },
            {
                "p": "round",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "7d42a2fe2c17e881"
            ]
        ]
    },
    {
        "id": "7d42a2fe2c17e881",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "range node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"range\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to map the input range {{{input}}} to the output range of {{{output}}}, round: {{{round}}}",
        "output": "str",
        "x": 460,
        "y": 740,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "c2587e5a46b3333a",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "return code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 180,
        "wires": []
    },
    {
        "id": "07983e9a009caca0",
        "type": "function",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "sanitize",
        "func": "const x = msg.timestamp;\nmsg.timestamp = new Date(x).toLocaleString();\nmsg.name = `\"${msg.name} ${msg.timestamp}\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 420,
        "wires": [
            [
                "1347e312c3605c84"
            ]
        ]
    },
    {
        "id": "733c94970d337f9c",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "name": "set task props",
        "props": [
            {
                "p": "language",
                "v": "node-red and javascript",
                "vt": "str"
            },
            {
                "p": "min_tokens",
                "v": "2000",
                "vt": "str"
            },
            {
                "p": "temperature",
                "v": "0.7",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "turbo",
        "x": 270,
        "y": 940,
        "wires": [
            [
                "ca30f223da2eb850"
            ]
        ]
    },
    {
        "id": "827283cf8de80f5f",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "stderr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 140,
        "wires": []
    },
    {
        "id": "95b39c14ee8685eb",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "g": "9a13ab3250919592",
        "name": "stdout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 100,
        "wires": []
    },
    {
        "id": "12769c7d38749696",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "subflow",
        "props": [
            {
                "p": "functionality",
                "v": "the subflow should have two outputs. it should check the msg object for the 'iteration' property. if it's unset, set it to 1, if it's 3 or greater, pass the msg to the second output. if it's less than 3, increment it and set the payload to \"please review and improve your work. respond with the complete improved result, obeying the same formatting rules.\" ",
                "vt": "str"
            },
            {
                "p": "inputs",
                "v": "1",
                "vt": "str"
            },
            {
                "p": "outputs",
                "v": "2",
                "vt": "str"
            },
            {
                "p": "max_tokens",
                "v": "4000",
                "vt": "str"
            },
            {
                "p": "name",
                "v": "improve ",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 860,
        "wires": [
            [
                "0ebe932274dd8ae0"
            ]
        ]
    },
    {
        "id": "0ebe932274dd8ae0",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "subflow generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are an expert in node-red.\nRespond with valid JSON syntax for a single Node-RED subflow according to the following specifications:\n\nname: {{name}}\ninputs: {{inputs}}\noutputs: {{outputs}}\nfunctionality: {{functionality}}\n\nmake sure your JSON is in a valide markdown code block, annotated with the 'json' tag\nmake sure you're using properly random keys, and that your schema is formatted correctly, here's an example subflow for reference:\n\n```json\n[{\"id\":\"5abc1dc662b969f1\",\"type\":\"subflow\",\"name\":\"Subflow 1\",\"info\":\"\",\"in\":[{\"x\":50,\"y\":30,\"wires\":[]}],\"out\":[{\"x\":160,\"y\":30,\"wires\":[{\"id\":\"09e1b9d57be64d59\",\"port\":0}]},{\"x\":215,\"y\":30,\"wires\":[{\"id\":\"5abc1dc662b969f1\",\"port\":0}]}]},{\"id\":\"09e1b9d57be64d59\",\"type\":\"inject\",\"z\":\"5abc1dc662b969f1\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"x\":100,\"y\":120,\"wires\":[[]]}]\n```",
        "output": "str",
        "x": 470,
        "y": 860,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "d0477f0a51f6b626",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "3f3293c32911f3f7",
        "name": "Success Message",
        "field": "payload",
        "fieldType": "msg",
        "format": "mustache",
        "syntax": "plain",
        "template": "Node {{name}} created successfully",
        "x": 990,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "6bc47f07e248de42",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "switch node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"switch\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to route messages based on the following rules: ```{{{payload}}}```",
        "output": "str",
        "x": 460,
        "y": 560,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "14c2821ee677af5b",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "template",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "format",
                "v": "Mustache template",
                "vt": "str"
            },
            {
                "p": "output",
                "v": "plain text",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Node {{name}} created successfully",
        "payloadType": "str",
        "x": 120,
        "y": 780,
        "wires": [
            [
                "7f458d55cc90c247"
            ]
        ]
    },
    {
        "id": "7f458d55cc90c247",
        "type": "template",
        "z": "ae1a045cf8952634",
        "g": "744e87cdb668bb4c",
        "name": "template node generator",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Respond only with valid JSON syntax for a single Node-RED \"template\" node that can be imported into the Node-RED editor. Do not add any comments or explanations. The node should be configured to format: {{format}}, output as {{output}}, with the payload: {{{payload}}}",
        "output": "str",
        "x": 450,
        "y": 780,
        "wires": [
            [
                "1c90cadb8c31c64d"
            ]
        ]
    },
    {
        "id": "9a85f5855700fe5b",
        "type": "subflow:f8d5a5a4f2b87c52",
        "z": "ae1a045cf8952634",
        "name": "validate",
        "x": 460,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c13f6114b4ebbbcc",
        "type": "template",
        "z": "ae1a045cf8952634",
        "name": "requirements",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "I need a node-red subflow according to the following Specification:\n\nTechnical Specification for Subflow: Detect Changes in Subflow Versions\n\n**Input**:\n- `msg.payload`: The parsed JSON content of the flows.json file.\n\n**Output**:\n- `msg.updatedSubflows`: An array of subflow objects with detected changes.\n\n**Subflow Description**:\n\nThe purpose of this subflow is to detect changes in the semver of subflow definitions in a Node-RED flows.json file. It takes the parsed JSON content of the flows.json file as input and outputs an array of updated subflow objects.\n\n**Subflow Nodes**:\n\n1. `function` node (analyzeSubflows): This node will analyze the input subflows, comparing the current versions to the previously known versions.\n   - Input: `msg.payload`\n   - Process: Extract subflows and compare their semver to the last known versions stored in a \"context\" or \"flow\" variable. If a change is detected, store the updated subflow object in an array.\n   - Output: `msg.updatedSubflows`\n\n**Subflow Implementation**:\n\n1. Add a `function` node (analyzeSubflows) to the subflow workspace.\n2. Set the function node's properties as follows:\n   - Name: \"Analyze Subflows\"\n   - Function: (example JavaScript code)\n\n```javascript\nconst currentSubflows = msg.payload.filter(node => node.type.startsWith('subflow:'));\nconst updatedSubflows = [];\nconst lastKnownVersions = context.get('lastKnownVersions') || {};\n\ncurrentSubflows.forEach(subflow => {\n  const {id, type, version} = subflow;\n  const lastVersion = lastKnownVersions[id];\n\n  if (!lastVersion || lastVersion !== version) {\n    updatedSubflows.push(subflow);\n    lastKnownVersions[id] = version;\n  }\n});\n\ncontext.set('lastKnownVersions', lastKnownVersions);\nmsg.updatedSubflows = updatedSubflows;\n\nreturn msg;\n```\n\n3. Connect the input of the subflow to the input of the \"Analyze Subflows\" node.\n4. Connect the output of the \"Analyze Subflows\" node to the output of the subflow.\n",
        "output": "str",
        "x": 210,
        "y": 1060,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "b78c22c8285b0f8d",
        "type": "file",
        "z": "ae1a045cf8952634",
        "name": "",
        "filename": "patch.raw",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 400,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1a651fe61e3c23ae",
        "type": "subflow:a14f5a91.f5c0b",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 690,
        "y": 1180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "eab86b444316c929",
        "type": "template",
        "z": "ae1a045cf8952634",
        "name": "subflows",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "I need a node-red node according to the following specification:\n\n1. Function node (Prepare Subflow Data):\n   - Prepare the subflow data as a JSON string.\n   - Set `msg.headers` with the appropriate \"Content-Type\" for the IPFS API request.\n   - Set `msg.payload` to the JSON string of the subflow data.\n   - Set `msg.url` to the IPFS API endpoint for adding data (`\"http://localhost:5001/api/v0/add\"`).",
        "output": "str",
        "x": 480,
        "y": 1060,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "520242a6cec4e981",
        "type": "template",
        "z": "ae1a045cf8952634",
        "name": "subflows",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "I need a node red subflow that will accept a payload object with an id property\n\nthe payload should be stringified (human readable) and written to [id].json, in a directory specifiable by environment variable on the subflow",
        "output": "str",
        "x": 660,
        "y": 1060,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "9b2f804cfc4db9e7",
        "type": "subflow:a54b6077b1444737",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 670,
        "y": 980,
        "wires": [
            [
                "520242a6cec4e981"
            ]
        ],
        "info": "title\n---"
    },
    {
        "id": "a334dd5d4a338825",
        "type": "template",
        "z": "ae1a045cf8952634",
        "name": "subflows",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "I need a node red subflow that will ",
        "output": "str",
        "x": 820,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "3de9a2e2dc0d3896",
        "type": "subflow:a54b6077b1444737",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 810,
        "y": 1020,
        "wires": [
            [
                "a334dd5d4a338825"
            ]
        ]
    },
    {
        "id": "7c5e2ba298e8f0b8",
        "type": "subflow:f8d5a5a4f2b87c52",
        "z": "ae1a045cf8952634",
        "name": "flow validation",
        "x": 400,
        "y": 1240,
        "wires": [
            [
                "e0d3db9e38a3818a",
                "464979df52525452"
            ]
        ]
    },
    {
        "id": "ca30f223da2eb850",
        "type": "template",
        "z": "ae1a045cf8952634",
        "name": "1",
        "field": "requirements",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Subflow Name: Monitor Flows.json\n\nDescription: Monitors the local flows.json file for changes and emits the parsed JSON content when a change is detected.\n\nInput:\n\nNo input is required for this subflow.\nOutput:\n\nmsg.payload: The parsed JSON content of the updated flows.json file.\nNodes:\n\n\"inject\" node (Start monitoring):\n\nName: Start monitoring\nPayload: none\nRepeat: none (trigger only once)\nOutput: 1\n\"watch\" node (Watch flows.json):\n\nName: Watch flows.json\nFilename: Path to the local flows.json file\nEvent type: Change\nOutput: 1\n\"file in\" node (Read flows.json):\n\nName: Read flows.json\nFilename: Mustache template with {{{msg.filename}}}\nOutput: string\nSend message on: file change\nOutput: 1\n\"json\" node (Parse JSON content):\n\nName: Parse JSON content\nAction: Convert between JSON string & object\nProperty: msg.payload\nOutput: 1\n\"join\" node (Join initial trigger and file watch events):\n\nName: Join events\nMode: Automatic\nBuild: merged object\nOutput: 1\nFlow Connections:\n\nConnect the \"Start monitoring\" node to the \"Read flows.json\" node.\nConnect the \"Watch flows.json\" node to the \"Read flows.json\" node.\nConnect the \"Read flows.json\" node to the \"Parse JSON content\" node.\nConnect the \"Parse JSON content\" node to the \"Join events\" node.\nConnect the \"Join events\" node to the subflow output.\nThis subflow, when added to a flow, will start monitoring the local flows.json file and emit the parsed JSON content as msg.payload whenever there's a change detected in the file.",
        "output": "str",
        "x": 90,
        "y": 1080,
        "wires": [
            [
                "414ddee1287efb66"
            ]
        ]
    },
    {
        "id": "49f77bdfca3e452c",
        "type": "inject",
        "z": "ae1a045cf8952634",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1420,
        "wires": [
            [
                "84f980d9a95956ea"
            ]
        ]
    },
    {
        "id": "84f980d9a95956ea",
        "type": "subflow:529552c35927a0b3",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 300,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "0692192a946d12d1",
        "type": "delay",
        "z": "ae1a045cf8952634",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 940,
        "wires": [
            [
                "9b2f804cfc4db9e7"
            ]
        ]
    },
    {
        "id": "e0d3db9e38a3818a",
        "type": "subflow:subflow_id",
        "z": "ae1a045cf8952634",
        "name": "",
        "env": [
            {
                "name": "FILE_DIRECTORY",
                "value": "./subflows",
                "type": "str"
            }
        ],
        "x": 590,
        "y": 1240,
        "wires": [
            [
                "fa460447404966a0",
                "464979df52525452"
            ]
        ]
    },
    {
        "id": "524ddd4a6598c4f8",
        "type": "subflow:a54b6077b1444737",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "eab86b444316c929"
            ]
        ],
        "info": "title\n---"
    },
    {
        "id": "19dedea5e2cf2d6c",
        "type": "subflow:a54b6077b1444737",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "c13f6114b4ebbbcc",
                "8218cddbab46d600"
            ]
        ],
        "info": "title\n---"
    },
    {
        "id": "2778f8cedd470477",
        "type": "subflow:a54b6077b1444737",
        "z": "ae1a045cf8952634",
        "name": "",
        "x": 90,
        "y": 1020,
        "wires": [
            [
                "ca30f223da2eb850"
            ]
        ],
        "info": "title\n---"
    },
    {
        "id": "8218cddbab46d600",
        "type": "delay",
        "z": "ae1a045cf8952634",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 80,
        "y": 980,
        "wires": [
            [
                "2778f8cedd470477"
            ]
        ]
    },
    {
        "id": "fa460447404966a0",
        "type": "debug",
        "z": "ae1a045cf8952634",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1240,
        "wires": []
    },
    {
        "id": "90794d03f65a40d4",
        "type": "uibuilder",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "",
        "topic": "",
        "url": "uib-element-test",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0-beta",
        "showMsgUib": true,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "26fbd32ea1d00ff2"
            ],
            [
                "81cfdd8b1357b74c"
            ]
        ],
        "info": "This example uses the default blank template.\r\n\r\nIt does not use any front-end framework, just\r\npure HTML, CSS and JavaScript."
    },
    {
        "id": "14ded4d1dc70efbf",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"ROW1\":{\"COL1\":\"R1C1\",\"COL2\":\"R1C2\"},\"ROW2\":{\"COL1\":\"R2C1\",\"COL2\":\"R2C2\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 2240,
        "wires": [
            [
                "d3a95abaddc5c013"
            ]
        ]
    },
    {
        "id": "d52bbc4c5096d4ba",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "",
        "topic": "eltest-tbl",
        "elementtype": "table",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-tbl",
        "elementIdSourceType": "str",
        "heading": "My Table Heading (h4)",
        "headingSourceType": "str",
        "headingLevel": "h4",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 500,
        "y": 1260,
        "wires": [
            [
                "f38d46523be0c1fe"
            ]
        ]
    },
    {
        "id": "d3a95abaddc5c013",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "",
        "topic": "chain2",
        "elementtype": "table",
        "parent": "#chain1 li:nth-child(3)",
        "parentSource": "#chain1 > li:nth-child(3)",
        "parentSourceType": "str",
        "elementid": "chain2",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 760,
        "y": 2240,
        "wires": [
            [
                "f042b949d4143ac6"
            ]
        ]
    },
    {
        "id": "496418a44a66cc5e",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "e1901bb3da85dd78",
        "name": "",
        "topic": "eltest-ul-ol",
        "elementtype": "ul",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-ul-ol",
        "elementIdSourceType": "str",
        "heading": "My Heading",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 520,
        "y": 440,
        "wires": [
            [
                "560371c044ee9e19"
            ]
        ]
    },
    {
        "id": "ec046fe7e55e944c",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "",
        "topic": "chain1",
        "elementtype": "ul",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "chain1",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 330,
        "y": 2240,
        "wires": [
            [
                "14ded4d1dc70efbf"
            ]
        ]
    },
    {
        "id": "03979555908332c4",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "",
        "topic": "eltest-dl",
        "elementtype": "dl",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-dl",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h3",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 570,
        "y": 960,
        "wires": [
            [
                "95a6c6f3e84b4fea"
            ]
        ]
    },
    {
        "id": "07f1643db81c0995",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "263bd5d828fb96be",
        "name": "",
        "topic": "eltest-html",
        "elementtype": "html",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-html",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 490,
        "y": 1800,
        "wires": [
            [
                "20deb97725012b7e"
            ]
        ]
    },
    {
        "id": "da18127ca09d0758",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "263bd5d828fb96be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-html-from-html",
        "payload": "{\t    \"mystring\": \"Boo-hoo\",\t    \"mynumber\": $formatInteger($random() * 100, \"#00\")\t}\t    ",
        "payloadType": "jsonata",
        "x": 150,
        "y": 1780,
        "wires": [
            [
                "f02b2b567a27e3bf"
            ]
        ]
    },
    {
        "id": "f02b2b567a27e3bf",
        "type": "template",
        "z": "3badb0a6906eef7f",
        "g": "263bd5d828fb96be",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: \n<p>\n<i>{{payload.mystring}}</i>,\n</p><p>\n<b>{{payload.mynumber}}</b>.\n</p>",
        "output": "str",
        "x": 280,
        "y": 1780,
        "wires": [
            [
                "07f1643db81c0995"
            ]
        ]
    },
    {
        "id": "9b8878a8a530e1b9",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "161798c0ebe14c60",
        "name": "",
        "topic": "eltest-title",
        "elementtype": "title",
        "parent": "body",
        "parentSource": "body",
        "parentSourceType": "str",
        "elementid": "eltest-title",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "7ed058d7900e3daa"
            ]
        ]
    },
    {
        "id": "58968670b8adf81b",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "65795642cec1af50",
        "name": "",
        "topic": "",
        "elementtype": "tr",
        "parent": "#eltest-tbl",
        "parentSource": "#eltest-tbl",
        "parentSourceType": "str",
        "elementid": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "1",
        "positionSourceType": "str",
        "confData": {},
        "x": 390,
        "y": 1380,
        "wires": [
            [
                "b8338b38fa0f261f"
            ]
        ]
    },
    {
        "id": "a05186890868f6cb",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "65795642cec1af50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-update-title",
        "payload": "{\"COL1\":\"**\",\"COL2\":\"**\"}",
        "payloadType": "json",
        "x": 190,
        "y": 1380,
        "wires": [
            [
                "58968670b8adf81b"
            ]
        ]
    },
    {
        "id": "d94e668db5709de3",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "161798c0ebe14c60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-update-title",
        "payload": "\"[\" & $formatInteger($random() * 100, \"#00\") & \"] Dynamic title\"",
        "payloadType": "jsonata",
        "x": 130,
        "y": 1960,
        "wires": [
            [
                "9b8878a8a530e1b9"
            ]
        ]
    },
    {
        "id": "e1795c2c54ee3880",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "42a2b3e7d6c165bf",
        "name": "",
        "topic": "eltest-textbox",
        "elementtype": "article",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-textbox",
        "elementIdSourceType": "str",
        "heading": "A <u>Manually</u> Inserted Heading",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 420,
        "y": 2080,
        "wires": [
            [
                "0ff90fd3f27b33be"
            ]
        ]
    },
    {
        "id": "f8db205586825dcd",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "",
        "topic": "",
        "elementtype": "li",
        "parent": "#eltest-ul-ol",
        "parentSource": "#eltest-ul-ol",
        "parentSourceType": "str",
        "elementid": "",
        "elementIdSourceType": "str",
        "heading": "IGNORED",
        "headingLevel": "h2",
        "position": "last",
        "confData": {},
        "x": 540,
        "y": 580,
        "wires": [
            [
                "474079d2dd072158"
            ]
        ]
    },
    {
        "id": "685760eb828baa61",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "add-to-list",
        "payload": "A am a new list entry 😁",
        "payloadType": "str",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "f8db205586825dcd"
            ]
        ]
    },
    {
        "id": "5df757879277f3a3",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "add-to-list-array",
        "payload": "[\"One new\", \"Two new\"]",
        "payloadType": "json",
        "x": 240,
        "y": 620,
        "wires": [
            [
                "f8db205586825dcd"
            ]
        ]
    },
    {
        "id": "c2dcca959c44112c",
        "type": "uib-update",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "",
        "topic": "",
        "mode": "update",
        "modeSourceType": "modeType",
        "cssSelector": "\"#eltest-ul-ol  li:nth-child(\" & payload & \")\"",
        "cssSelectorType": "jsonata",
        "slotSourceProp": "",
        "slotSourcePropType": "msg",
        "attribsSource": "{\"style\":\"list-style: \\\"✅\\\";\"}",
        "attribsSourceType": "json",
        "slotPropMarkdown": false,
        "x": 570,
        "y": 680,
        "wires": [
            [
                "474079d2dd072158"
            ]
        ]
    },
    {
        "id": "e51ee02c0622e551",
        "type": "uib-update",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "",
        "topic": "",
        "mode": "delete",
        "modeSourceType": "modeType",
        "cssSelector": "\"#eltest-ul-ol  li:nth-child(\" & payload & \")\"",
        "cssSelectorType": "jsonata",
        "slotSourceProp": "",
        "slotSourcePropType": "msg",
        "attribsSource": "",
        "attribsSourceType": "json",
        "slotPropMarkdown": false,
        "x": 570,
        "y": 780,
        "wires": [
            [
                "474079d2dd072158"
            ]
        ]
    },
    {
        "id": "8a39826860e82c51",
        "type": "uib-update",
        "z": "3badb0a6906eef7f",
        "name": "",
        "topic": "",
        "mode": "update",
        "modeSourceType": "modeType",
        "cssSelector": "#eltest-ul-ol  li",
        "cssSelectorType": "str",
        "slotSourceProp": "",
        "slotSourcePropType": "msg",
        "attribsSource": "{\"style\":\"list-style: \\\"🚑\\\";\"}",
        "attribsSourceType": "json",
        "slotPropMarkdown": false,
        "x": 520,
        "y": 740,
        "wires": [
            [
                "474079d2dd072158"
            ]
        ]
    },
    {
        "id": "ede83b9af785c506",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "",
        "topic": "",
        "elementtype": "sform",
        "parent": "body",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "sform1",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 450,
        "y": 1560,
        "wires": [
            [
                "534ccd905d0adc50"
            ]
        ]
    },
    {
        "id": "f6094a474faf5649",
        "type": "uib-update",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "",
        "topic": "",
        "mode": "update",
        "modeSourceType": "update",
        "cssSelector": "topic",
        "cssSelectorType": "msg",
        "slotSourceProp": "",
        "slotSourcePropType": "str",
        "attribsSource": "{ \"value\": payload }",
        "attribsSourceType": "jsonata",
        "slotPropMarkdown": false,
        "x": 410,
        "y": 1640,
        "wires": [
            [
                "534ccd905d0adc50"
            ]
        ]
    },
    {
        "id": "82e68978.045b68",
        "type": "uibuilder",
        "z": "3badb0a6906eef7f",
        "name": "",
        "topic": "",
        "url": "uibuilder_Example",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "6.4.1",
        "showMsgUib": false,
        "x": 480,
        "y": 2580,
        "wires": [
            [
                "16dde3ab.c3fc8c"
            ],
            []
        ]
    },
    {
        "id": "b64473a7.3d6dc",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "111",
        "payloadType": "num",
        "x": 210,
        "y": 2520,
        "wires": [
            [
                "82e68978.045b68"
            ]
        ]
    },
    {
        "id": "18e53c59.76d4a4",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "222",
        "payloadType": "num",
        "x": 213,
        "y": 2558,
        "wires": [
            [
                "82e68978.045b68"
            ]
        ]
    },
    {
        "id": "d18950fe.7f075",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "333",
        "payloadType": "num",
        "x": 213,
        "y": 2598,
        "wires": [
            [
                "82e68978.045b68"
            ]
        ]
    },
    {
        "id": "1239bfb7.99356",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cardId",
        "payload": "444",
        "payloadType": "num",
        "x": 213,
        "y": 2638,
        "wires": [
            [
                "82e68978.045b68"
            ]
        ]
    },
    {
        "id": "16dde3ab.c3fc8c",
        "type": "debug",
        "z": "3badb0a6906eef7f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 700,
        "y": 2560,
        "wires": []
    },
    {
        "id": "3dfeef8155126dc8",
        "type": "subflow:f8178bddf53d614e",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "20",
                "type": "num"
            },
            {
                "name": "xs",
                "value": "2",
                "type": "num"
            },
            {
                "name": "label",
                "value": "apply",
                "type": "str"
            }
        ],
        "x": 950,
        "y": 2780,
        "wires": [
            [
                "20743d8a3cc5ebf8"
            ]
        ]
    },
    {
        "id": "832bd8ab0bda88dc",
        "type": "subflow:aec0d9b3a72479a3",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "9",
                "type": "num"
            },
            {
                "name": "xs",
                "value": "1",
                "type": "num"
            },
            {
                "name": "label",
                "value": "alert",
                "type": "str"
            }
        ],
        "x": 1290,
        "y": 2660,
        "wires": []
    },
    {
        "id": "a3253d399cacc370",
        "type": "subflow:eceae5246a022264",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "19",
                "type": "num"
            },
            {
                "name": "xs",
                "value": "2",
                "type": "num"
            },
            {
                "name": "label",
                "value": "alert message",
                "type": "str"
            }
        ],
        "x": 960,
        "y": 2720,
        "wires": [
            [
                "2b96d9d64e154f82"
            ]
        ]
    },
    {
        "id": "89e0ea68b669ee5f",
        "type": "subflow:1bd86210b503b896",
        "z": "3badb0a6906eef7f",
        "name": "",
        "x": 1350,
        "y": 2780,
        "wires": []
    },
    {
        "id": "2b96d9d64e154f82",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "textInput",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "20743d8a3cc5ebf8",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "errorMessage",
                "pt": "flow",
                "to": "textInput",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'\"' & $flowContext('textInput') & '\" is applied.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 2780,
        "wires": [
            [
                "89e0ea68b669ee5f"
            ]
        ]
    },
    {
        "id": "e249937c95fd7e93",
        "type": "subflow:c9fb680bbb1d67cc",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "10",
                "type": "num"
            },
            {
                "name": "xs",
                "value": "1",
                "type": "num"
            }
        ],
        "x": 950,
        "y": 2660,
        "wires": [
            [
                "31db4b325d6bb143"
            ]
        ]
    },
    {
        "id": "e50fc03bbbd10684",
        "type": "subflow:9c0a52e2454bab6f",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "1",
                "type": "num"
            },
            {
                "name": "label",
                "value": "value",
                "type": "str"
            }
        ],
        "x": 950,
        "y": 2480,
        "wires": [
            [
                "4ef7b97f68c4fe6d",
                "ab802bfd236aba7c",
                "e231797a03125ed3"
            ]
        ]
    },
    {
        "id": "50e3f611f5c4262c",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "errorMessage",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 2600,
        "wires": [
            [
                "89e0ea68b669ee5f"
            ]
        ]
    },
    {
        "id": "ab802bfd236aba7c",
        "type": "subflow:8994b5c4dba46c76",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "2",
                "type": "num"
            },
            {
                "name": "xs",
                "value": "4",
                "type": "num"
            },
            {
                "name": "label",
                "value": "test",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "e231797a03125ed3",
        "type": "subflow:4102712984e468f8",
        "z": "3badb0a6906eef7f",
        "name": "",
        "env": [
            {
                "name": "order",
                "value": "3",
                "type": "num"
            },
            {
                "name": "label",
                "value": "Time series data",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 2540,
        "wires": []
    },
    {
        "id": "31db4b325d6bb143",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "switch",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'alert: ' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 2660,
        "wires": [
            [
                "832bd8ab0bda88dc"
            ]
        ]
    },
    {
        "id": "3cf7a70ec42e0b3f",
        "type": "switch",
        "z": "3badb0a6906eef7f",
        "name": "",
        "property": "switch",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 2600,
        "wires": [
            [
                "50e3f611f5c4262c"
            ]
        ]
    },
    {
        "id": "4ef7b97f68c4fe6d",
        "type": "switch",
        "z": "3badb0a6906eef7f",
        "name": "> 90",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "90",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 2600,
        "wires": [
            [
                "3cf7a70ec42e0b3f"
            ]
        ]
    },
    {
        "id": "3923739d82142906",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "Add a Form",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sform1",
        "payload": "[{\"id\":\"r1-text\",\"type\":\"text\",\"required\":false,\"label\":\"Text Input:\",\"value\":\"Foo\"},{\"id\":\"r6-email-req\",\"type\":\"email\",\"title\":\"You can add your own popup info\",\"required\":true,\"label\":\"Email:\"},{\"id\":\"r2-color\",\"type\":\"color\",\"label\":\"Colour:\",\"value\":\"#427798\"},{\"id\":\"r3-date-req\",\"type\":\"date\",\"required\":true},{\"id\":\"r3-date-month\",\"type\":\"month\",\"disabled\":true},{\"id\":\"r4-range\",\"type\":\"range\",\"required\":false,\"label\":\"Range (0-100):\",\"value\":\"20\",\"min\":0,\"max\":100}]",
        "payloadType": "json",
        "x": 190,
        "y": 1560,
        "wires": [
            [
                "ede83b9af785c506"
            ]
        ],
        "info": "Creates an example form showing off different features.\r\n\r\nNo buttons are included so that the `uib-element` node\r\nautomatically creates the two \"Send\" and \"Reset\" default\r\nbuttons for you.\r\n\r\nEmail & Data inputs are marked as required but left with\r\nno default value to show the invalid field/form highlights."
    },
    {
        "id": "495d6cfe53a5351a",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "Change row 1 value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "#r1-text",
        "payload": "Bah",
        "payloadType": "str",
        "x": 170,
        "y": 1640,
        "wires": [
            [
                "f6094a474faf5649"
            ]
        ]
    },
    {
        "id": "f0f4f6c5a20a1823",
        "type": "comment",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Chk Description in each node",
        "info": "",
        "x": 480,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d2fb30390013840",
        "type": "switch",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Connect Only",
        "property": "uibuilderCtrl",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "client connect",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 725,
        "y": 220,
        "wires": [
            [
                "5961e6952243291c"
            ]
        ],
        "l": false
    },
    {
        "id": "c3449025d8452e42",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "Dark",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "mark-dark",
        "payload": "{\"class\":\"dark\"}",
        "payloadType": "json",
        "x": 890,
        "y": 420,
        "wires": [
            [
                "2663180282c358a6"
            ]
        ]
    },
    {
        "id": "4484b6de34d4dd97",
        "type": "comment",
        "z": "3badb0a6906eef7f",
        "name": "Dashboard UI: http://localhost:1880/uikit",
        "info": "",
        "x": 1060,
        "y": 2420,
        "wires": []
    },
    {
        "id": "92af2057a4b6218f",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "Delete #2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "delete-#two",
        "payload": "2",
        "payloadType": "str",
        "x": 200,
        "y": 780,
        "wires": [
            [
                "e51ee02c0622e551"
            ]
        ]
    },
    {
        "id": "8b561177d69cb6d3",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "42a2b3e7d6c165bf",
        "name": "Inject text/HTML",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-article",
        "payload": "Some <b><u>HTML</u></b> inserted dynamically.",
        "payloadType": "str",
        "x": 160,
        "y": 2080,
        "wires": [
            [
                "e1795c2c54ee3880"
            ]
        ]
    },
    {
        "id": "f2a7c0f95409f865",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "Light",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "mark-light",
        "payload": "{\"class\":\"light\"}",
        "payloadType": "json",
        "x": 890,
        "y": 380,
        "wires": [
            [
                "2663180282c358a6"
            ]
        ]
    },
    {
        "id": "b18b8a4c83135013",
        "type": "comment",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "Limitation: we have to resend everything just to update one thing. \\n Instead, consider using this to create the HTML then copy the HTML using your browser's developer tools \\n then save the HTML into the index.html file. \\n You can still update using a uib-element node with the same ID or you can use a uib-update node as appropriate.",
        "info": "",
        "x": 620,
        "y": 2320,
        "wires": []
    },
    {
        "id": "c203417099e22d29",
        "type": "link in",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "link in 7",
        "links": [],
        "x": 205,
        "y": 120,
        "wires": [
            [
                "90794d03f65a40d4"
            ]
        ]
    },
    {
        "id": "560371c044ee9e19",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "e1901bb3da85dd78",
        "name": "link out 14",
        "mode": "link",
        "links": [],
        "x": 675,
        "y": 440,
        "wires": []
    },
    {
        "id": "95a6c6f3e84b4fea",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "link out 15",
        "mode": "link",
        "links": [],
        "x": 715,
        "y": 960,
        "wires": []
    },
    {
        "id": "f38d46523be0c1fe",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "link out 16",
        "mode": "link",
        "links": [],
        "x": 655,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f042b949d4143ac6",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "link out 17",
        "mode": "link",
        "links": [],
        "x": 995,
        "y": 2240,
        "wires": []
    },
    {
        "id": "20deb97725012b7e",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "263bd5d828fb96be",
        "name": "link out 18",
        "mode": "link",
        "links": [],
        "x": 635,
        "y": 1800,
        "wires": []
    },
    {
        "id": "7ed058d7900e3daa",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "161798c0ebe14c60",
        "name": "link out 21",
        "mode": "link",
        "links": [],
        "x": 475,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b8338b38fa0f261f",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "65795642cec1af50",
        "name": "link out 24",
        "mode": "link",
        "links": [],
        "x": 535,
        "y": 1380,
        "wires": []
    },
    {
        "id": "0ff90fd3f27b33be",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "42a2b3e7d6c165bf",
        "name": "link out 25",
        "mode": "link",
        "links": [],
        "x": 575,
        "y": 2080,
        "wires": []
    },
    {
        "id": "474079d2dd072158",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "link out 26",
        "mode": "link",
        "links": [],
        "x": 775,
        "y": 580,
        "wires": []
    },
    {
        "id": "534ccd905d0adc50",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "link out 29",
        "mode": "link",
        "links": [],
        "x": 645,
        "y": 1560,
        "wires": []
    },
    {
        "id": "88abbd5438821f7a",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "link out 30",
        "mode": "link",
        "links": [],
        "x": 655,
        "y": 260,
        "wires": []
    },
    {
        "id": "c5effb699b6d4bc1",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "name": "link out 38",
        "mode": "link",
        "links": [],
        "x": 1215,
        "y": 380,
        "wires": []
    },
    {
        "id": "0dd33ba823c0af7b",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Log Lvl 0",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"set\",\"prop\":\"logLevel\",\"value\":0}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "88abbd5438821f7a"
            ]
        ]
    },
    {
        "id": "6221e2b8f2b50df8",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Log Lvl 5",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"set\",\"prop\":\"logLevel\",\"value\":5}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "88abbd5438821f7a"
            ]
        ]
    },
    {
        "id": "af9ee48ee4da8b11",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "Plain DL List (Array)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-dl-list",
        "payload": "[[\"Entry One\",\"Description One\"],[\"Entry Two\",\"Description Two a\",\"Description Two b\",\"Description Two c\"],[\"Entry Three\",\"Description Three\"],[\"Entry Four\",\"Description Four\"]]",
        "payloadType": "json",
        "x": 250,
        "y": 900,
        "wires": [
            [
                "03979555908332c4"
            ]
        ]
    },
    {
        "id": "d08a2076e8158929",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "Plain DL List (List of Objects)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-dl-list",
        "payload": "[{\"Entry 1\":\"Description 1\"},{\"Entry 2a\":\"Description 2a\",\"Entry 2b\":\"Description 2b - this wont show. Use List not object for multiple Descriptions.\"},{\"Entry 3\":[\"Description 3 a\",\"Description 3 b\"]},{\"Entry 4\":\"Description 4\"}]",
        "payloadType": "json",
        "x": 220,
        "y": 940,
        "wires": [
            [
                "03979555908332c4"
            ]
        ]
    },
    {
        "id": "8fc4bf76f457ae68",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "Plain DL List (Object of Objects)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-dl-list",
        "payload": "{\"ONE\":{\"A\":\"LI One A\"},\"TWO\":{\"B\":[\"LI Two B1\",\"LI Two B2\"]},\"THREE\":{\"C\":{\"C1\":\"LI Three C1\",\"C2\":\"LI Three C2\"}}}",
        "payloadType": "json",
        "x": 210,
        "y": 980,
        "wires": [
            [
                "03979555908332c4"
            ]
        ]
    },
    {
        "id": "d3cda6078ae9ca73",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "Plain List",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Chain 1 & 2",
        "payload": "[\"LI One\",\"LI Two\",\"LI Three\",\"LI Four\"]",
        "payloadType": "json",
        "x": 140,
        "y": 2240,
        "wires": [
            [
                "ec046fe7e55e944c"
            ]
        ]
    },
    {
        "id": "d58b7efe68a2da4d",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "Plain Table (Array)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-table-from-array",
        "payload": "[{\"COL1\":\"R1C1\",\"COL2\":\"R1C2\"},{\"COL1\":\"R2C1\",\"COL2\":\"R2C2\"}]",
        "payloadType": "json",
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "d52bbc4c5096d4ba"
            ]
        ]
    },
    {
        "id": "e30d349d9b3399c8",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "Plain Table (Object)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-table-from-object",
        "payload": "{\"ROW1\":{\"COL1\":\"R1C1\",\"COL2\":\"R1C2\"},\"ROW2\":{\"COL1\":\"R2C1\",\"COL2\":\"R2C2\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 1200,
        "wires": [
            [
                "d52bbc4c5096d4ba"
            ]
        ]
    },
    {
        "id": "51db7182c8c27901",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "e1901bb3da85dd78",
        "name": "Plain UL/OL List (Array)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-list",
        "payload": "[\"LI One\",\"LI Two\",[\"LI Three a\",\"LI Three b\"],\"LI Four\"]",
        "payloadType": "json",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "496418a44a66cc5e"
            ]
        ]
    },
    {
        "id": "0f1d399c3f14e113",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "e1901bb3da85dd78",
        "name": "Plain UL/OL List (Object)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-list",
        "payload": "{\"L1\":\"LI One\",\"L2\":\"LI Two\",\"L3\":\"LI Three a\",\"L4\":[\"LI Four a\",\"LI Four b\"]}",
        "payloadType": "json",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "496418a44a66cc5e"
            ]
        ]
    },
    {
        "id": "c492d5d86eb0cfcb",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "195a61f93a912086"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "0fe568807e7bd394",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "e1901bb3da85dd78",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "496418a44a66cc5e"
            ]
        ]
    },
    {
        "id": "4ce558165663c95b",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1280,
        "wires": [
            [
                "d52bbc4c5096d4ba"
            ]
        ]
    },
    {
        "id": "168cfe507c55796a",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "0f5c35ef5c4bf8f5",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 1020,
        "wires": [
            [
                "03979555908332c4"
            ]
        ]
    },
    {
        "id": "cef57eb67e055c56",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "8049618125109f32",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2280,
        "wires": [
            [
                "ec046fe7e55e944c"
            ]
        ]
    },
    {
        "id": "9eed5fe003f16b5e",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "263bd5d828fb96be",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "07f1643db81c0995"
            ]
        ]
    },
    {
        "id": "85fd31019802a001",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "f6154314aee80d24",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1600,
        "wires": [
            [
                "ede83b9af785c506"
            ]
        ]
    },
    {
        "id": "6e5aada95fc82d83",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "42a2b3e7d6c165bf",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 2120,
        "wires": [
            [
                "e1795c2c54ee3880"
            ]
        ]
    },
    {
        "id": "454da28ef00e68b6",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "195a61f93a912086"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "900f97b2b079f1bf",
        "type": "comment",
        "z": "3badb0a6906eef7f",
        "g": "0f3fbb9e84943e6b",
        "name": "Send the UL/OL list and change the Parent to `#eltest-ul-ol *[data-row-index=\"3\"]` \\n (without the quotes) to insert the table into the list entry #3",
        "info": "",
        "x": 580,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2663180282c358a6",
        "type": "uib-update",
        "z": "3badb0a6906eef7f",
        "name": "Set Light/Dark mode",
        "topic": "",
        "mode": "update",
        "modeSourceType": "modeType",
        "cssSelector": "html",
        "cssSelectorType": "str",
        "slotSourceProp": "",
        "slotSourcePropType": "msg",
        "attribsSource": "payload",
        "attribsSourceType": "msg",
        "slotPropMarkdown": false,
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "c5effb699b6d4bc1"
            ]
        ]
    },
    {
        "id": "5961e6952243291c",
        "type": "change",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Set title text",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "uib-element tests",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "uibuilderCtrl",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 775,
        "y": 220,
        "wires": [
            [
                "3fd347d2dad186ca"
            ]
        ],
        "l": false
    },
    {
        "id": "3fd347d2dad186ca",
        "type": "uib-element",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Set title/heading on load",
        "topic": "",
        "elementtype": "title",
        "parent": "body",
        "parentSource": "",
        "parentSourceType": "str",
        "elementid": "myh1",
        "elementId": "",
        "elementIdSourceType": "str",
        "heading": "",
        "headingSourceType": "str",
        "headingLevel": "h2",
        "position": "first",
        "positionSourceType": "str",
        "confData": {},
        "x": 825,
        "y": 220,
        "wires": [
            [
                "3b6dfa72a2767eb8"
            ]
        ],
        "l": false
    },
    {
        "id": "3b6dfa72a2767eb8",
        "type": "link out",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Set title/heading on page load",
        "mode": "link",
        "links": [],
        "x": 875,
        "y": 220,
        "wires": []
    },
    {
        "id": "c87017ebcab8dc1a",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "08f358ec9af4dfc2",
        "name": "Tick off #2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload3",
                "v": "\"#eltest-ul-ol  li:nth-child(2)\"",
                "vt": "jsonata"
            },
            {
                "p": "payload4",
                "v": "#eltest-ul-o",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tick-off-two",
        "payload": "2",
        "payloadType": "str",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "c2dcca959c44112c"
            ]
        ]
    },
    {
        "id": "d0ab82e45161ca1e",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "195a61f93a912086"
            ]
        ]
    },
    {
        "id": "262ab2295096703e",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "Toggle Visible Status",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showStatus\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "195a61f93a912086"
            ]
        ]
    },
    {
        "id": "a48c0beb68e76845",
        "type": "debug",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 725,
        "y": 160,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "26fbd32ea1d00ff2",
        "type": "debug",
        "z": "3badb0a6906eef7f",
        "g": "3cd8b7c5aae9d40b",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 655,
        "y": 120,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "88c5781097ea7ef5",
        "type": "inject",
        "z": "3badb0a6906eef7f",
        "name": "Update all li's",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update-all-li",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "8a39826860e82c51"
            ]
        ]
    },
    {
        "id": "31f1c33627de3ec3",
        "type": "comment",
        "z": "3badb0a6906eef7f",
        "name": "Zero-Code Examples. Flows for all uib-element types",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "cfa849a50c95f207",
        "type": "inject",
        "z": "9d62131d7173b55c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "25c662d8cf11fa39",
        "type": "debug",
        "z": "9d62131d7173b55c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "9277fb162d587a94",
        "type": "subflow:fe8c349f5351690d",
        "z": "08499cc526888222",
        "name": "",
        "x": 370,
        "y": 140,
        "wires": [
            [],
            []
        ]
    }
]